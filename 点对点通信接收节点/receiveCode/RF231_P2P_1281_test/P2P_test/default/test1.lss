
test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800200  0000165c  000016f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000165c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000394  00800270  00800270  00001760  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000816  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000233f  00000000  00000000  00001ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000705  00000000  00000000  00004335  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c6e  00000000  00000000  00004a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000570  00000000  00000000  000066a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000121a  00000000  00000000  00006c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010c2  00000000  00000000  00007e32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00008ef4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
       4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
       c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      40:	0c 94 37 0a 	jmp	0x146e	; 0x146e <__vector_16>
      44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      50:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <__vector_20>
      54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      64:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__vector_25>
      68:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      6c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      70:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      74:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      78:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      7c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      80:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      84:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      88:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      8c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      90:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      94:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      98:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      9c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      a0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      a4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      a8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      ac:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      b0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      b4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      b8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      bc:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      c0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      c4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
      c8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf ef       	ldi	r28, 0xFF	; 255
      d2:	d1 e2       	ldi	r29, 0x21	; 33
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
      d8:	12 e0       	ldi	r17, 0x02	; 2
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b2 e0       	ldi	r27, 0x02	; 2
      de:	ec e5       	ldi	r30, 0x5C	; 92
      e0:	f6 e1       	ldi	r31, 0x16	; 22
      e2:	00 e0       	ldi	r16, 0x00	; 0
      e4:	0b bf       	out	0x3b, r16	; 59
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
      e8:	07 90       	elpm	r0, Z+
      ea:	0d 92       	st	X+, r0
      ec:	a0 37       	cpi	r26, 0x70	; 112
      ee:	b1 07       	cpc	r27, r17
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
      f2:	16 e0       	ldi	r17, 0x06	; 6
      f4:	a0 e7       	ldi	r26, 0x70	; 112
      f6:	b2 e0       	ldi	r27, 0x02	; 2
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
      fc:	a4 30       	cpi	r26, 0x04	; 4
      fe:	b1 07       	cpc	r27, r17
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
     102:	0e 94 32 02 	call	0x464	; 0x464 <main>
     106:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <_exit>

0000010a <__bad_interrupt>:
     10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <com_init>:
 */
void com_init( baud_rate_t rate ){
  
#if defined( RZ502 )    
    //Initialize USART module.
    UBRR0H = 0x00;
     10e:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = rate;
     112:	80 93 c4 00 	sts	0x00C4, r24
  
    //Enable USART transmitter module. Always on.
    ENABLE_RECEIVER;
     116:	a1 ec       	ldi	r26, 0xC1	; 193
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	8c 91       	ld	r24, X
     11c:	80 61       	ori	r24, 0x10	; 16
     11e:	8c 93       	st	X, r24
    ENABLE_TRANSMITTER;
     120:	8c 91       	ld	r24, X
     122:	88 60       	ori	r24, 0x08	; 8
     124:	8c 93       	st	X, r24
	
    //8-N-1.
    UCSR0C |= ( 1 << UCSZ01 ) | ( 1 << UCSZ00 ); 
     126:	e2 ec       	ldi	r30, 0xC2	; 194
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	80 81       	ld	r24, Z
     12c:	86 60       	ori	r24, 0x06	; 6
     12e:	80 83       	st	Z, r24
  
    com_number_of_received_bytes = 0;
     130:	10 92 5d 03 	sts	0x035D, r1
    com_data_reception_finished = false;
     134:	10 92 60 03 	sts	0x0360, r1
    ENABLE_RECEIVE_COMPLETE_INTERRUPT;
     138:	8c 91       	ld	r24, X
     13a:	80 68       	ori	r24, 0x80	; 128
     13c:	8c 93       	st	X, r24
	FTDI_CONFIGURE_PIN_CHANGE_INTERRUPT( );
	FTDI_ENABLE_RECEIVER( );
#else
    #error "Board Option Not Supported."  
#endif  
}
     13e:	08 95       	ret

00000140 <com_send_string>:
/*! \brief This function sends data on the chosen communication interface (USB or USART).
 *  
 *  \param[in] data Pointer to data that is to be sent on the communication interface.
 *  \param[in] data_length Number of bytes to read from the array pointed to by data.
 */
void com_send_string( uint8_t *data, uint8_t data_length ){
     140:	fc 01       	movw	r30, r24
     142:	07 c0       	rjmp	.+14     	; 0x152 <com_send_string+0x12>
    
    while (--data_length > 0) {
        
#if defined( RZ502 )        
        for(; !(UCSR0A & (1 << UDRE0));) {;}
     144:	80 91 c0 00 	lds	r24, 0x00C0
     148:	85 ff       	sbrs	r24, 5
     14a:	fc cf       	rjmp	.-8      	; 0x144 <com_send_string+0x4>
  	    UDR0 = *data++; //Put symbol in data register.
     14c:	81 91       	ld	r24, Z+
     14e:	80 93 c6 00 	sts	0x00C6, r24
 *  \param[in] data Pointer to data that is to be sent on the communication interface.
 *  \param[in] data_length Number of bytes to read from the array pointed to by data.
 */
void com_send_string( uint8_t *data, uint8_t data_length ){
    
    while (--data_length > 0) {
     152:	61 50       	subi	r22, 0x01	; 1
     154:	b9 f7       	brne	.-18     	; 0x144 <com_send_string+0x4>
	    *FTDI_Fifo = ( *data++ );
#else
    #error "Board Option Not Supported."
#endif
    }    
}
     156:	08 95       	ret

00000158 <com_send_hex>:

/*! \brief This function prints the supplied argument as a hex number.
 *  
 *  \param[in] nmbr Number to be printed as a hexadescimal number.
 */
	void com_send_hex( uint8_t nmbr ){
     158:	98 2f       	mov	r25, r24
	
    #if defined( RZ502 )        
			for(; !(UCSR0A & (1 << UDRE0));) {;}
     15a:	80 91 c0 00 	lds	r24, 0x00C0
     15e:	85 ff       	sbrs	r24, 5
     160:	fc cf       	rjmp	.-8      	; 0x15a <com_send_hex+0x2>
			//UDR0 = '0'; //Put symbol in data register.
		
			for(; !(UCSR0A & (1 << UDRE0));) {;}
     162:	80 91 c0 00 	lds	r24, 0x00C0
     166:	85 ff       	sbrs	r24, 5
     168:	fc cf       	rjmp	.-8      	; 0x162 <com_send_hex+0xa>
			//UDR0 = 'x'; //Put symbol in data register.
			
			for(; !(UCSR0A & (1 << UDRE0));) {;}
     16a:	80 91 c0 00 	lds	r24, 0x00C0
     16e:	85 ff       	sbrs	r24, 5
     170:	fc cf       	rjmp	.-8      	; 0x16a <com_send_hex+0x12>
			UDR0 = hex_lookup[ ( nmbr >> 4 ) & 0x0F ];
     172:	e9 2f       	mov	r30, r25
     174:	e2 95       	swap	r30
     176:	ef 70       	andi	r30, 0x0F	; 15
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	e3 5f       	subi	r30, 0xF3	; 243
     17c:	fd 4f       	sbci	r31, 0xFD	; 253
     17e:	80 81       	ld	r24, Z
     180:	80 93 c6 00 	sts	0x00C6, r24
			
			for(; !(UCSR0A & (1 << UDRE0));) {;}
     184:	80 91 c0 00 	lds	r24, 0x00C0
     188:	85 ff       	sbrs	r24, 5
     18a:	fc cf       	rjmp	.-8      	; 0x184 <com_send_hex+0x2c>
			UDR0 = hex_lookup[ ( nmbr & 0x0F ) ];
     18c:	e9 2f       	mov	r30, r25
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	ef 70       	andi	r30, 0x0F	; 15
     192:	f0 70       	andi	r31, 0x00	; 0
     194:	e3 5f       	subi	r30, 0xF3	; 243
     196:	fd 4f       	sbci	r31, 0xFD	; 253
     198:	80 81       	ld	r24, Z
     19a:	80 93 c6 00 	sts	0x00C6, r24
			while((FTDI_TX_MASK & FTDI_PIN) != LOW){;}
			*FTDI_Fifo = hex_lookup[ ( nmbr & 0x0F ) ];
#else
    #error "Board Option Not Supported."
#endif
	}
     19e:	08 95       	ret

000001a0 <com_send_number>:
	
	void com_send_number( uint8_t nmbr ){
     1a0:	28 2f       	mov	r18, r24
	
    #if defined( RZ502 )        
			for(; !(UCSR0A & (1 << UDRE0));) {;}
     1a2:	80 91 c0 00 	lds	r24, 0x00C0
     1a6:	85 ff       	sbrs	r24, 5
     1a8:	fc cf       	rjmp	.-8      	; 0x1a2 <com_send_number+0x2>
			//UDR0 = '0'; //Put symbol in data register.
			UDR0 = dec_lookup[nmbr/1000];
     1aa:	80 e3       	ldi	r24, 0x30	; 48
     1ac:	80 93 c6 00 	sts	0x00C6, r24
			for(; !(UCSR0A & (1 << UDRE0));) {;}
     1b0:	80 91 c0 00 	lds	r24, 0x00C0
     1b4:	85 ff       	sbrs	r24, 5
     1b6:	fc cf       	rjmp	.-8      	; 0x1b0 <com_send_number+0x10>
			//UDR0 = 'x'; //Put symbol in data register.
			UDR0 = dec_lookup[nmbr/100%10];
     1b8:	82 2f       	mov	r24, r18
     1ba:	64 e6       	ldi	r22, 0x64	; 100
     1bc:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__udivmodqi4>
     1c0:	6a e0       	ldi	r22, 0x0A	; 10
     1c2:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__udivmodqi4>
     1c6:	e9 2f       	mov	r30, r25
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	ee 5f       	subi	r30, 0xFE	; 254
     1cc:	fd 4f       	sbci	r31, 0xFD	; 253
     1ce:	80 81       	ld	r24, Z
     1d0:	80 93 c6 00 	sts	0x00C6, r24
			for(; !(UCSR0A & (1 << UDRE0));) {;}
     1d4:	80 91 c0 00 	lds	r24, 0x00C0
     1d8:	85 ff       	sbrs	r24, 5
     1da:	fc cf       	rjmp	.-8      	; 0x1d4 <com_send_number+0x34>
			UDR0 = dec_lookup[nmbr/10%10];
     1dc:	82 2f       	mov	r24, r18
     1de:	6a e0       	ldi	r22, 0x0A	; 10
     1e0:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__udivmodqi4>
     1e4:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__udivmodqi4>
     1e8:	e9 2f       	mov	r30, r25
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	ee 5f       	subi	r30, 0xFE	; 254
     1ee:	fd 4f       	sbci	r31, 0xFD	; 253
     1f0:	80 81       	ld	r24, Z
     1f2:	80 93 c6 00 	sts	0x00C6, r24
			
			for(; !(UCSR0A & (1 << UDRE0));) {;}
     1f6:	80 91 c0 00 	lds	r24, 0x00C0
     1fa:	85 ff       	sbrs	r24, 5
     1fc:	fc cf       	rjmp	.-8      	; 0x1f6 <com_send_number+0x56>
			UDR0 = dec_lookup[nmbr%10];
     1fe:	82 2f       	mov	r24, r18
     200:	6a e0       	ldi	r22, 0x0A	; 10
     202:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__udivmodqi4>
     206:	e9 2f       	mov	r30, r25
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	ee 5f       	subi	r30, 0xFE	; 254
     20c:	fd 4f       	sbci	r31, 0xFD	; 253
     20e:	80 81       	ld	r24, Z
     210:	80 93 c6 00 	sts	0x00C6, r24
			while((FTDI_TX_MASK & FTDI_PIN) != LOW){;}
			*FTDI_Fifo = dec_lookup[nmbr%10];
#else
    #error "Board Option Not Supported."
#endif
	}
     214:	08 95       	ret

00000216 <com_send_lownumber>:
	
	void com_send_lownumber( int nmbr ){
		nmbr = nmbr%10000;
     216:	60 e1       	ldi	r22, 0x10	; 16
     218:	77 e2       	ldi	r23, 0x27	; 39
     21a:	0e 94 05 0b 	call	0x160a	; 0x160a <__divmodhi4>
     21e:	9c 01       	movw	r18, r24
	
    #if defined( RZ502 )        
			for(; !(UCSR0A & (1 << UDRE0));) {;}
     220:	80 91 c0 00 	lds	r24, 0x00C0
     224:	85 ff       	sbrs	r24, 5
     226:	fc cf       	rjmp	.-8      	; 0x220 <com_send_lownumber+0xa>
			//UDR0 = '0'; //Put symbol in data register.
			UDR0 = dec_lookup[nmbr/1000];
     228:	c9 01       	movw	r24, r18
     22a:	68 ee       	ldi	r22, 0xE8	; 232
     22c:	73 e0       	ldi	r23, 0x03	; 3
     22e:	0e 94 05 0b 	call	0x160a	; 0x160a <__divmodhi4>
     232:	fb 01       	movw	r30, r22
     234:	ee 5f       	subi	r30, 0xFE	; 254
     236:	fd 4f       	sbci	r31, 0xFD	; 253
     238:	80 81       	ld	r24, Z
     23a:	80 93 c6 00 	sts	0x00C6, r24
			for(; !(UCSR0A & (1 << UDRE0));) {;}
     23e:	80 91 c0 00 	lds	r24, 0x00C0
     242:	85 ff       	sbrs	r24, 5
     244:	fc cf       	rjmp	.-8      	; 0x23e <com_send_lownumber+0x28>
			//UDR0 = 'x'; //Put symbol in data register.
			UDR0 = dec_lookup[nmbr/100%10];
     246:	c9 01       	movw	r24, r18
     248:	64 e6       	ldi	r22, 0x64	; 100
     24a:	70 e0       	ldi	r23, 0x00	; 0
     24c:	0e 94 05 0b 	call	0x160a	; 0x160a <__divmodhi4>
     250:	cb 01       	movw	r24, r22
     252:	6a e0       	ldi	r22, 0x0A	; 10
     254:	70 e0       	ldi	r23, 0x00	; 0
     256:	0e 94 05 0b 	call	0x160a	; 0x160a <__divmodhi4>
     25a:	fc 01       	movw	r30, r24
     25c:	ee 5f       	subi	r30, 0xFE	; 254
     25e:	fd 4f       	sbci	r31, 0xFD	; 253
     260:	80 81       	ld	r24, Z
     262:	80 93 c6 00 	sts	0x00C6, r24
			for(; !(UCSR0A & (1 << UDRE0));) {;}
     266:	80 91 c0 00 	lds	r24, 0x00C0
     26a:	85 ff       	sbrs	r24, 5
     26c:	fc cf       	rjmp	.-8      	; 0x266 <com_send_lownumber+0x50>
			UDR0 = dec_lookup[nmbr/10%10];
     26e:	c9 01       	movw	r24, r18
     270:	6a e0       	ldi	r22, 0x0A	; 10
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	0e 94 05 0b 	call	0x160a	; 0x160a <__divmodhi4>
     278:	cb 01       	movw	r24, r22
     27a:	6a e0       	ldi	r22, 0x0A	; 10
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	0e 94 05 0b 	call	0x160a	; 0x160a <__divmodhi4>
     282:	fc 01       	movw	r30, r24
     284:	ee 5f       	subi	r30, 0xFE	; 254
     286:	fd 4f       	sbci	r31, 0xFD	; 253
     288:	80 81       	ld	r24, Z
     28a:	80 93 c6 00 	sts	0x00C6, r24
			
			for(; !(UCSR0A & (1 << UDRE0));) {;}
     28e:	80 91 c0 00 	lds	r24, 0x00C0
     292:	85 ff       	sbrs	r24, 5
     294:	fc cf       	rjmp	.-8      	; 0x28e <com_send_lownumber+0x78>
			UDR0 = dec_lookup[nmbr%10];
     296:	c9 01       	movw	r24, r18
     298:	6a e0       	ldi	r22, 0x0A	; 10
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	0e 94 05 0b 	call	0x160a	; 0x160a <__divmodhi4>
     2a0:	fc 01       	movw	r30, r24
     2a2:	ee 5f       	subi	r30, 0xFE	; 254
     2a4:	fd 4f       	sbci	r31, 0xFD	; 253
     2a6:	80 81       	ld	r24, Z
     2a8:	80 93 c6 00 	sts	0x00C6, r24
			while((FTDI_TX_MASK & FTDI_PIN) != LOW){;}
			*FTDI_Fifo = dec_lookup[nmbr%10];
#else
    #error "Board Option Not Supported."
#endif
	}
     2ac:	08 95       	ret

000002ae <com_send_highnumber>:
	
	
	void com_send_highnumber( int nmbr ){
		nmbr = nmbr/10000;
     2ae:	60 e1       	ldi	r22, 0x10	; 16
     2b0:	77 e2       	ldi	r23, 0x27	; 39
     2b2:	0e 94 05 0b 	call	0x160a	; 0x160a <__divmodhi4>
     2b6:	9b 01       	movw	r18, r22
	
    #if defined( RZ502 )        
			for(; !(UCSR0A & (1 << UDRE0));) {;}
     2b8:	80 91 c0 00 	lds	r24, 0x00C0
     2bc:	85 ff       	sbrs	r24, 5
     2be:	fc cf       	rjmp	.-8      	; 0x2b8 <com_send_highnumber+0xa>
			//UDR0 = '0'; //Put symbol in data register.
			UDR0 = dec_lookup[nmbr/1000];
     2c0:	c9 01       	movw	r24, r18
     2c2:	68 ee       	ldi	r22, 0xE8	; 232
     2c4:	73 e0       	ldi	r23, 0x03	; 3
     2c6:	0e 94 05 0b 	call	0x160a	; 0x160a <__divmodhi4>
     2ca:	fb 01       	movw	r30, r22
     2cc:	ee 5f       	subi	r30, 0xFE	; 254
     2ce:	fd 4f       	sbci	r31, 0xFD	; 253
     2d0:	80 81       	ld	r24, Z
     2d2:	80 93 c6 00 	sts	0x00C6, r24
			for(; !(UCSR0A & (1 << UDRE0));) {;}
     2d6:	80 91 c0 00 	lds	r24, 0x00C0
     2da:	85 ff       	sbrs	r24, 5
     2dc:	fc cf       	rjmp	.-8      	; 0x2d6 <com_send_highnumber+0x28>
			//UDR0 = 'x'; //Put symbol in data register.
			UDR0 = dec_lookup[nmbr/100%10];
     2de:	c9 01       	movw	r24, r18
     2e0:	64 e6       	ldi	r22, 0x64	; 100
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	0e 94 05 0b 	call	0x160a	; 0x160a <__divmodhi4>
     2e8:	cb 01       	movw	r24, r22
     2ea:	6a e0       	ldi	r22, 0x0A	; 10
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	0e 94 05 0b 	call	0x160a	; 0x160a <__divmodhi4>
     2f2:	fc 01       	movw	r30, r24
     2f4:	ee 5f       	subi	r30, 0xFE	; 254
     2f6:	fd 4f       	sbci	r31, 0xFD	; 253
     2f8:	80 81       	ld	r24, Z
     2fa:	80 93 c6 00 	sts	0x00C6, r24
			for(; !(UCSR0A & (1 << UDRE0));) {;}
     2fe:	80 91 c0 00 	lds	r24, 0x00C0
     302:	85 ff       	sbrs	r24, 5
     304:	fc cf       	rjmp	.-8      	; 0x2fe <com_send_highnumber+0x50>
			UDR0 = dec_lookup[nmbr/10%10];
     306:	c9 01       	movw	r24, r18
     308:	6a e0       	ldi	r22, 0x0A	; 10
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	0e 94 05 0b 	call	0x160a	; 0x160a <__divmodhi4>
     310:	cb 01       	movw	r24, r22
     312:	6a e0       	ldi	r22, 0x0A	; 10
     314:	70 e0       	ldi	r23, 0x00	; 0
     316:	0e 94 05 0b 	call	0x160a	; 0x160a <__divmodhi4>
     31a:	fc 01       	movw	r30, r24
     31c:	ee 5f       	subi	r30, 0xFE	; 254
     31e:	fd 4f       	sbci	r31, 0xFD	; 253
     320:	80 81       	ld	r24, Z
     322:	80 93 c6 00 	sts	0x00C6, r24
			
			for(; !(UCSR0A & (1 << UDRE0));) {;}
     326:	80 91 c0 00 	lds	r24, 0x00C0
     32a:	85 ff       	sbrs	r24, 5
     32c:	fc cf       	rjmp	.-8      	; 0x326 <com_send_highnumber+0x78>
			UDR0 = dec_lookup[nmbr%10];
     32e:	c9 01       	movw	r24, r18
     330:	6a e0       	ldi	r22, 0x0A	; 10
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	0e 94 05 0b 	call	0x160a	; 0x160a <__divmodhi4>
     338:	fc 01       	movw	r30, r24
     33a:	ee 5f       	subi	r30, 0xFE	; 254
     33c:	fd 4f       	sbci	r31, 0xFD	; 253
     33e:	80 81       	ld	r24, Z
     340:	80 93 c6 00 	sts	0x00C6, r24
			while((FTDI_TX_MASK & FTDI_PIN) != LOW){;}
			*FTDI_Fifo = dec_lookup[nmbr%10];
#else
    #error "Board Option Not Supported."
#endif
	}
     344:	08 95       	ret

00000346 <com_get_received_data>:
    return &com_buffer[0];
}*/

uint8_t * com_get_received_data( void ){

	if(ori_buf_flag){
     346:	80 91 70 02 	lds	r24, 0x0270
     34a:	88 23       	and	r24, r24
     34c:	19 f4       	brne	.+6      	; 0x354 <com_get_received_data+0xe>
     34e:	27 ee       	ldi	r18, 0xE7	; 231
     350:	32 e0       	ldi	r19, 0x02	; 2
     352:	02 c0       	rjmp	.+4      	; 0x358 <com_get_received_data+0x12>
     354:	21 e7       	ldi	r18, 0x71	; 113
     356:	32 e0       	ldi	r19, 0x02	; 2
		return com_buffer0;
	}else{
		return com_buffer1;
	}
}
     358:	c9 01       	movw	r24, r18
     35a:	08 95       	ret

0000035c <com_get_number_of_received_bytes>:
 *  \retval 1 Error: Typed Frame Too Long.
 *  \return Any non zero value returned indicatest that data is available and should be read.
 */
uint8_t com_get_number_of_received_bytes( void ){
    
    if (com_data_reception_finished == true) {
     35c:	80 91 60 03 	lds	r24, 0x0360
     360:	88 23       	and	r24, r24
     362:	49 f0       	breq	.+18     	; 0x376 <com_get_number_of_received_bytes+0x1a>
		if(ori_buf_flag)
     364:	80 91 70 02 	lds	r24, 0x0270
     368:	88 23       	and	r24, r24
     36a:	19 f0       	breq	.+6      	; 0x372 <com_get_number_of_received_bytes+0x16>
        		return com_number_of_received_bytesA; 
     36c:	80 91 5e 03 	lds	r24, 0x035E
     370:	08 95       	ret
		else
			return com_number_of_received_bytesB; 
     372:	80 91 5f 03 	lds	r24, 0x035F
    } else { return 0; }
}
     376:	08 95       	ret

00000378 <com_reset_receiver>:
 *         data reception is done, and the end-user has read data.
 *  
 */
void com_reset_receiver( void ){
    
    DISABLE_RECEIVE_COMPLETE_INTERRUPT;
     378:	80 91 c1 00 	lds	r24, 0x00C1
     37c:	8f 77       	andi	r24, 0x7F	; 127
     37e:	80 93 c1 00 	sts	0x00C1, r24
    
//    com_number_of_received_bytes = 0;
    com_data_reception_finished = false;
     382:	10 92 60 03 	sts	0x0360, r1
     386:	02 c0       	rjmp	.+4      	; 0x38c <com_reset_receiver+0x14>
    uint8_t dummy = 0;
    //Following loop is used to ensure that the rx FIFO is flushed.
	//Sometimes it gets cloged up with old data.
	for( ;  UCSR0A & ( 1 << RXC0 ); )
	{
		dummy = UDR0;  
     388:	80 91 c6 00 	lds	r24, 0x00C6
    com_data_reception_finished = false;
    
    uint8_t dummy = 0;
    //Following loop is used to ensure that the rx FIFO is flushed.
	//Sometimes it gets cloged up with old data.
	for( ;  UCSR0A & ( 1 << RXC0 ); )
     38c:	80 91 c0 00 	lds	r24, 0x00C0
     390:	87 fd       	sbrc	r24, 7
     392:	fa cf       	rjmp	.-12     	; 0x388 <com_reset_receiver+0x10>
	{
		dummy = UDR0;  
	}
    
    ENABLE_RECEIVE_COMPLETE_INTERRUPT;
     394:	80 91 c1 00 	lds	r24, 0x00C1
     398:	80 68       	ori	r24, 0x80	; 128
     39a:	80 93 c1 00 	sts	0x00C1, r24
}
     39e:	08 95       	ret

000003a0 <__vector_25>:
        com_data_reception_finished = true;
    }
}*/

ISR( USART0_RX_vect )
{
     3a0:	1f 92       	push	r1
     3a2:	0f 92       	push	r0
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	0f 92       	push	r0
     3a8:	0b b6       	in	r0, 0x3b	; 59
     3aa:	0f 92       	push	r0
     3ac:	11 24       	eor	r1, r1
     3ae:	2f 93       	push	r18
     3b0:	8f 93       	push	r24
     3b2:	9f 93       	push	r25
     3b4:	af 93       	push	r26
     3b6:	bf 93       	push	r27
     3b8:	ef 93       	push	r30
     3ba:	ff 93       	push	r31
	uint8_t receivedData;

//	TCCR0B = 0x00;
//	TCNT0 = Timer0_Initvalue;//0x19; //reset timer0 Value
//	hal_clear_timer0_flag();
	receivedData = ( uint8_t )UDR0;	//Collect data.
     3bc:	90 91 c6 00 	lds	r25, 0x00C6

	if (com_number_of_received_bytes < COM_RX_MAX_BYTES) 
     3c0:	80 91 5d 03 	lds	r24, 0x035D
     3c4:	84 37       	cpi	r24, 0x74	; 116
     3c6:	d8 f5       	brcc	.+118    	; 0x43e <__vector_25+0x9e>
	{
	//End of data stream.
			if( (receivedData == '\n') ||(receivedData == 0x0D) )
     3c8:	9a 30       	cpi	r25, 0x0A	; 10
     3ca:	11 f0       	breq	.+4      	; 0x3d0 <__vector_25+0x30>
     3cc:	9d 30       	cpi	r25, 0x0D	; 13
     3ce:	51 f5       	brne	.+84     	; 0x424 <__vector_25+0x84>
				{
					Set_com_Rx_Finished_flag();
					//DISABLE_RECEIVE_COMPLETE_INTERRUPT0;
				}*/
				com_number_of_received_bytes++;
				*com_buffer++= receivedData;
     3d0:	e0 91 00 02 	lds	r30, 0x0200
     3d4:	f0 91 01 02 	lds	r31, 0x0201
     3d8:	df 01       	movw	r26, r30
     3da:	9d 93       	st	X+, r25
				com_number_of_received_bytes++;
				*com_buffer++=0;
     3dc:	11 82       	std	Z+1, r1	; 0x01
				com_number_of_received_bytes++;
     3de:	28 2f       	mov	r18, r24
     3e0:	2d 5f       	subi	r18, 0xFD	; 253
				*com_buffer++=0;
     3e2:	11 96       	adiw	r26, 0x01	; 1
     3e4:	1c 92       	st	X, r1
				com_data_reception_finished = true;
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	90 93 60 03 	sts	0x0360, r25
				if(ori_buf_flag){
     3ec:	80 91 70 02 	lds	r24, 0x0270
     3f0:	88 23       	and	r24, r24
     3f2:	59 f0       	breq	.+22     	; 0x40a <__vector_25+0x6a>
					ori_buf_flag=false;
     3f4:	10 92 70 02 	sts	0x0270, r1
					com_buffer=com_buffer0;
     3f8:	81 e7       	ldi	r24, 0x71	; 113
     3fa:	92 e0       	ldi	r25, 0x02	; 2
     3fc:	90 93 01 02 	sts	0x0201, r25
     400:	80 93 00 02 	sts	0x0200, r24
					com_number_of_received_bytesB = com_number_of_received_bytes;
     404:	20 93 5f 03 	sts	0x035F, r18
     408:	0a c0       	rjmp	.+20     	; 0x41e <__vector_25+0x7e>
					//return com_buffer1;
				}else{
					ori_buf_flag=true;
     40a:	90 93 70 02 	sts	0x0270, r25
					com_buffer=com_buffer1;
     40e:	87 ee       	ldi	r24, 0xE7	; 231
     410:	92 e0       	ldi	r25, 0x02	; 2
     412:	90 93 01 02 	sts	0x0201, r25
     416:	80 93 00 02 	sts	0x0200, r24
					com_number_of_received_bytesA = com_number_of_received_bytes;
     41a:	20 93 5e 03 	sts	0x035E, r18
					//return com_buffer0;
				}
					com_number_of_received_bytes=0;
     41e:	10 92 5d 03 	sts	0x035D, r1
     422:	12 c0       	rjmp	.+36     	; 0x448 <__vector_25+0xa8>
			}
			else
			{
				com_number_of_received_bytes++;
     424:	8f 5f       	subi	r24, 0xFF	; 255
     426:	80 93 5d 03 	sts	0x035D, r24
				*com_buffer++= receivedData;
     42a:	e0 91 00 02 	lds	r30, 0x0200
     42e:	f0 91 01 02 	lds	r31, 0x0201
     432:	91 93       	st	Z+, r25
     434:	f0 93 01 02 	sts	0x0201, r31
     438:	e0 93 00 02 	sts	0x0200, r30
     43c:	05 c0       	rjmp	.+10     	; 0x448 <__vector_25+0xa8>
			}
		
	}
	else
	{
	        com_number_of_received_bytes = 1;
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	80 93 5d 03 	sts	0x035D, r24
	        com_data_reception_finished = true;
     444:	80 93 60 03 	sts	0x0360, r24
	}
	TCCR0B = 0x04;
	
*/
	}
}
     448:	ff 91       	pop	r31
     44a:	ef 91       	pop	r30
     44c:	bf 91       	pop	r27
     44e:	af 91       	pop	r26
     450:	9f 91       	pop	r25
     452:	8f 91       	pop	r24
     454:	2f 91       	pop	r18
     456:	0f 90       	pop	r0
     458:	0b be       	out	0x3b, r0	; 59
     45a:	0f 90       	pop	r0
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	0f 90       	pop	r0
     460:	1f 90       	pop	r1
     462:	18 95       	reti

00000464 <main>:
            } // end: if (rx_pool_head->crc == true) ...
        } // end: if (rx_pool_items_free == 0) ...
    } // end:  if (rx_flag == true) ...
}
 
int main( void ){
     464:	ff 92       	push	r15
     466:	0f 93       	push	r16
     468:	1f 93       	push	r17
     46a:	cf 93       	push	r28
     46c:	df 93       	push	r29
     
    static uint8_t length_of_received_data = 0;
    static uint8_t frame_sequence_number = 0;
    rx_flag = true;
     46e:	11 e0       	ldi	r17, 0x01	; 1
     470:	10 93 f6 05 	sts	0x05F6, r17
     
    /*Pre Build Header of IEEE 802.15.4 Data frame.*/
    tx_frame[ 0 ] = 0x61; //FCF.
     474:	81 e6       	ldi	r24, 0x61	; 97
     476:	80 93 64 03 	sts	0x0364, r24
    tx_frame[ 1 ] = 0x88; //FCF.                         //Sequence number set during frame transmission.
     47a:	88 e8       	ldi	r24, 0x88	; 136
     47c:	80 93 65 03 	sts	0x0365, r24
    tx_frame[ 3 ] = PAN_ID & 0xFF; //Dest. PANID.
     480:	8f ea       	ldi	r24, 0xAF	; 175
     482:	80 93 67 03 	sts	0x0367, r24
    tx_frame[ 4 ] = (PAN_ID >> 8 ) & 0xFF; //Dest. PANID.
     486:	8e eb       	ldi	r24, 0xBE	; 190
     488:	80 93 68 03 	sts	0x0368, r24
    tx_frame[ 5 ] = DEST_ADDRESS & 0xFF; //Dest. Addr.
     48c:	8d ea       	ldi	r24, 0xAD	; 173
     48e:	80 93 69 03 	sts	0x0369, r24
    tx_frame[ 6 ] = (DEST_ADDRESS >> 8 ) & 0xFF; //Dest. Addr.
     492:	8a eb       	ldi	r24, 0xBA	; 186
     494:	80 93 6a 03 	sts	0x036A, r24
    tx_frame[ 7 ] = SHORT_ADDRESS & 0xFF; //Source Addr.
     498:	8c ed       	ldi	r24, 0xDC	; 220
     49a:	80 93 6b 03 	sts	0x036B, r24
    tx_frame[ 8 ] = (SHORT_ADDRESS >> 8 ) & 0xFF; //Source Addr.     
     49e:	8c ea       	ldi	r24, 0xAC	; 172
     4a0:	80 93 6c 03 	sts	0x036C, r24
/*! \brief This function initialize the rx_pool. The rx_pool is in essence a FIFO.
 */
static void rx_pool_init( void )
{
 
    rx_pool_start = rx_pool;
     4a4:	23 ee       	ldi	r18, 0xE3	; 227
     4a6:	33 e0       	ldi	r19, 0x03	; 3
     4a8:	30 93 ec 05 	sts	0x05EC, r19
     4ac:	20 93 eb 05 	sts	0x05EB, r18
    rx_pool_end = &rx_pool[ RX_POOL_SIZE - 1 ];
     4b0:	89 e6       	ldi	r24, 0x69	; 105
     4b2:	95 e0       	ldi	r25, 0x05	; 5
     4b4:	90 93 ee 05 	sts	0x05EE, r25
     4b8:	80 93 ed 05 	sts	0x05ED, r24
     
    rx_pool_head = rx_pool_start;
     4bc:	30 93 f0 05 	sts	0x05F0, r19
     4c0:	20 93 ef 05 	sts	0x05EF, r18
    rx_pool_tail = rx_pool_end;
     4c4:	90 93 f2 05 	sts	0x05F2, r25
     4c8:	80 93 f1 05 	sts	0x05F1, r24
     
    rx_pool_items_free = RX_POOL_SIZE;
     4cc:	84 e0       	ldi	r24, 0x04	; 4
     4ce:	80 93 f3 05 	sts	0x05F3, r24
    rx_pool_items_used = 0;
     4d2:	10 92 f4 05 	sts	0x05F4, r1
     
    rx_pool_overflow_flag = false;
     4d6:	10 92 f5 05 	sts	0x05F5, r1
 
/*! \brief This function configure the necessary IO modules on the AVR.
 */
static void avr_init( void )
{
    com_init( BR_9600 );
     4da:	8f e2       	ldi	r24, 0x2F	; 47
     4dc:	0e 94 87 00 	call	0x10e	; 0x10e <com_init>
 */
static bool trx_init( void ){
     
    static bool status;
     
    if (tat_init( ) != TAT_SUCCESS) {
     4e0:	0e 94 74 07 	call	0xee8	; 0xee8 <tat_init>
     4e4:	80 34       	cpi	r24, 0x40	; 64
     4e6:	59 f4       	brne	.+22     	; 0x4fe <main+0x9a>
        status = false;
    } else if (tat_set_operating_channel( OPERATING_CHANNEL ) != TAT_SUCCESS) {
     4e8:	8b e0       	ldi	r24, 0x0B	; 11
     4ea:	0e 94 ce 05 	call	0xb9c	; 0xb9c <tat_set_operating_channel>
     4ee:	80 34       	cpi	r24, 0x40	; 64
     4f0:	31 f4       	brne	.+12     	; 0x4fe <main+0x9a>
        status = false;
    } else if (tat_set_clock_speed( true, CLKM_NO_CLOCK ) != TAT_SUCCESS) {
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	0e 94 5d 05 	call	0xaba	; 0xaba <tat_set_clock_speed>
     4fa:	80 34       	cpi	r24, 0x40	; 64
     4fc:	19 f0       	breq	.+6      	; 0x504 <main+0xa0>
        status = false; 
     4fe:	10 92 63 03 	sts	0x0363, r1
     502:	2a c0       	rjmp	.+84     	; 0x558 <main+0xf4>
    } else{
 
        /*Set up the extended modes:*/
        //RX_AACK:
        hal_subregister_write(SR_OQPSK_DATA_RATE, ALTRATE_250KBPS);
     504:	8c e0       	ldi	r24, 0x0C	; 12
     506:	63 e0       	ldi	r22, 0x03	; 3
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
        hal_subregister_write(SR_ANT_DIV_EN, ANT_DIV_DISABLE );
     510:	8d e0       	ldi	r24, 0x0D	; 13
     512:	68 e0       	ldi	r22, 0x08	; 8
     514:	43 e0       	ldi	r20, 0x03	; 3
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
     hal_subregister_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_SWITCH_DISABLE);
     51c:	8d e0       	ldi	r24, 0x0D	; 13
     51e:	64 e0       	ldi	r22, 0x04	; 4
     520:	42 e0       	ldi	r20, 0x02	; 2
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
        tat_set_short_address( SHORT_ADDRESS ); //Short Address.
     528:	8c ed       	ldi	r24, 0xDC	; 220
     52a:	9c ea       	ldi	r25, 0xAC	; 172
     52c:	0e 94 83 06 	call	0xd06	; 0xd06 <tat_set_short_address>
        tat_set_pan_id( PAN_ID ); //PAN ID.
     530:	8f ea       	ldi	r24, 0xAF	; 175
     532:	9e eb       	ldi	r25, 0xBE	; 190
     534:	0e 94 8f 06 	call	0xd1e	; 0xd1e <tat_set_pan_id>
        tat_set_device_role( false ); // No Coordintor support is necessary.
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	0e 94 ad 04 	call	0x95a	; 0x95a <tat_set_device_role>
         
        //TX_ARET:
        tat_configure_csma( 234, 0xE2 ); // Default CSMA_SEED_0, MIN_BE = 3, MAX_CSMA_RETRIES = , and CSMA_SEED_1 = 
     53e:	8a ee       	ldi	r24, 0xEA	; 234
     540:	62 ee       	ldi	r22, 0xE2	; 226
     542:	0e 94 ff 05 	call	0xbfe	; 0xbfe <tat_configure_csma>
         
        //Both Modes:
        tat_use_auto_tx_crc( true ); //Automatic CRC must be enabled.
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	0e 94 b4 04 	call	0x968	; 0x968 <tat_use_auto_tx_crc>
        hal_set_trx_end_event_handler( trx_end_handler ); // Event handler for TRX_END events.
     54c:	8e e9       	ldi	r24, 0x9E	; 158
     54e:	93 e0       	ldi	r25, 0x03	; 3
     550:	0e 94 24 08 	call	0x1048	; 0x1048 <hal_set_trx_end_event_handler>
         
        status = true;
     554:	10 93 63 03 	sts	0x0363, r17
    rx_pool_init( );
    avr_init( );
    trx_init( );
     
    //Set system state to RX_AACK_ON
    if (tat_set_trx_state( RX_AACK_ON ) != TAT_SUCCESS) {
     558:	86 e1       	ldi	r24, 0x16	; 22
     55a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <tat_set_trx_state>
     55e:	80 34       	cpi	r24, 0x40	; 64
     560:	29 f0       	breq	.+10     	; 0x56c <main+0x108>
        com_send_string( debug_fatal_error, sizeof( debug_fatal_error ) );
     562:	8e e1       	ldi	r24, 0x1E	; 30
     564:	92 e0       	ldi	r25, 0x02	; 2
     566:	67 e2       	ldi	r22, 0x27	; 39
     568:	0e 94 a0 00 	call	0x140	; 0x140 <com_send_string>
    } // end: if (tat_set_trx_state( RX_AACK_ON ) != TAT_SUCCESS) ...
     
    sei( );
     56c:	78 94       	sei
    hal_set_net_led();
     56e:	89 98       	cbi	0x11, 1	; 17
	
    //Give the user an indication that the system is ready.
    com_send_string( debug_type_message, sizeof( debug_type_message ) );
     570:	85 e4       	ldi	r24, 0x45	; 69
     572:	92 e0       	ldi	r25, 0x02	; 2
     574:	65 e1       	ldi	r22, 0x15	; 21
     576:	0e 94 a0 00 	call	0x140	; 0x140 <com_send_string>
    length_of_received_data = hal_register_read(RG_PART_NUM);
     57a:	8c e1       	ldi	r24, 0x1C	; 28
     57c:	0e 94 b5 08 	call	0x116a	; 0x116a <hal_register_read>
     580:	80 93 62 03 	sts	0x0362, r24
    frame_sequence_number = hal_register_read(RG_VERSION_NUM );
     584:	8d e1       	ldi	r24, 0x1D	; 29
     586:	0e 94 b5 08 	call	0x116a	; 0x116a <hal_register_read>
     58a:	80 93 61 03 	sts	0x0361, r24
/*! \brief This function initialize the rx_pool. The rx_pool is in essence a FIFO.
 */
static void rx_pool_init( void )
{
 
    rx_pool_start = rx_pool;
     58e:	03 ee       	ldi	r16, 0xE3	; 227
     590:	13 e0       	ldi	r17, 0x03	; 3
    rx_pool_end = &rx_pool[ RX_POOL_SIZE - 1 ];
     592:	c9 e6       	ldi	r28, 0x69	; 105
     594:	d5 e0       	ldi	r29, 0x05	; 5
     
    rx_pool_head = rx_pool_start;
    rx_pool_tail = rx_pool_end;
     
    rx_pool_items_free = RX_POOL_SIZE;
     596:	84 e0       	ldi	r24, 0x04	; 4
     598:	f8 2e       	mov	r15, r24
        - Notify if the typed message was too long.
     */
    while (true) {
         
        //Check if we have received something on the air interface.
        if (rx_pool_items_used != 0) {
     59a:	80 91 f4 05 	lds	r24, 0x05F4
     59e:	88 23       	and	r24, r24
     5a0:	09 f4       	brne	.+2      	; 0x5a4 <main+0x140>
     5a2:	a6 c0       	rjmp	.+332    	; 0x6f0 <main+0x28c>
            hal_set_data_led();
     5a4:	88 98       	cbi	0x11, 0	; 17
            //Handle wrapping of rx_pool.
            if (rx_pool_tail == rx_pool_end) {
     5a6:	20 91 f1 05 	lds	r18, 0x05F1
     5aa:	30 91 f2 05 	lds	r19, 0x05F2
     5ae:	80 91 ed 05 	lds	r24, 0x05ED
     5b2:	90 91 ee 05 	lds	r25, 0x05EE
     5b6:	28 17       	cp	r18, r24
     5b8:	39 07       	cpc	r19, r25
     5ba:	49 f4       	brne	.+18     	; 0x5ce <main+0x16a>
                rx_pool_tail = rx_pool_start;
     5bc:	80 91 eb 05 	lds	r24, 0x05EB
     5c0:	90 91 ec 05 	lds	r25, 0x05EC
     5c4:	90 93 f2 05 	sts	0x05F2, r25
     5c8:	80 93 f1 05 	sts	0x05F1, r24
     5cc:	06 c0       	rjmp	.+12     	; 0x5da <main+0x176>
            } else {
                ++rx_pool_tail;
     5ce:	2e 57       	subi	r18, 0x7E	; 126
     5d0:	3f 4f       	sbci	r19, 0xFF	; 255
     5d2:	30 93 f2 05 	sts	0x05F2, r19
     5d6:	20 93 f1 05 	sts	0x05F1, r18
            } // end: if (rx_pool_tail == rx_pool_end) ...
             
            //Turn interrupts off for a short while to protect when status
            //information about the rx_pool is updated.
            cli( );
     5da:	f8 94       	cli
             
            ++rx_pool_items_free;
     5dc:	80 91 f3 05 	lds	r24, 0x05F3
     5e0:	8f 5f       	subi	r24, 0xFF	; 255
     5e2:	80 93 f3 05 	sts	0x05F3, r24
            --rx_pool_items_used;
     5e6:	80 91 f4 05 	lds	r24, 0x05F4
     5ea:	81 50       	subi	r24, 0x01	; 1
     5ec:	80 93 f4 05 	sts	0x05F4, r24
             
            sei( );
     5f0:	78 94       	sei
             
            //Send the frame to the user:
            static uint8_t space[]="  ";
            //com_send_string( debug_data_received, sizeof( debug_data_received ) );
            com_send_hex(rx_pool_tail->data[10]);
     5f2:	e0 91 f1 05 	lds	r30, 0x05F1
     5f6:	f0 91 f2 05 	lds	r31, 0x05F2
     5fa:	83 85       	ldd	r24, Z+11	; 0x0b
     5fc:	0e 94 ac 00 	call	0x158	; 0x158 <com_send_hex>
			com_send_hex(rx_pool_tail->data[9]);
     600:	e0 91 f1 05 	lds	r30, 0x05F1
     604:	f0 91 f2 05 	lds	r31, 0x05F2
     608:	82 85       	ldd	r24, Z+10	; 0x0a
     60a:	0e 94 ac 00 	call	0x158	; 0x158 <com_send_hex>
            com_send_hex(rx_pool_tail->length);
     60e:	e0 91 f1 05 	lds	r30, 0x05F1
     612:	f0 91 f2 05 	lds	r31, 0x05F2
     616:	80 81       	ld	r24, Z
     618:	0e 94 ac 00 	call	0x158	; 0x158 <com_send_hex>
            com_send_hex(rx_pool_tail->data[4]);
     61c:	e0 91 f1 05 	lds	r30, 0x05F1
     620:	f0 91 f2 05 	lds	r31, 0x05F2
     624:	85 81       	ldd	r24, Z+5	; 0x05
     626:	0e 94 ac 00 	call	0x158	; 0x158 <com_send_hex>
			com_send_hex(rx_pool_tail->data[3]);
     62a:	e0 91 f1 05 	lds	r30, 0x05F1
     62e:	f0 91 f2 05 	lds	r31, 0x05F2
     632:	84 81       	ldd	r24, Z+4	; 0x04
     634:	0e 94 ac 00 	call	0x158	; 0x158 <com_send_hex>
			com_send_hex(rx_pool_tail->data[19]);
     638:	e0 91 f1 05 	lds	r30, 0x05F1
     63c:	f0 91 f2 05 	lds	r31, 0x05F2
     640:	84 89       	ldd	r24, Z+20	; 0x14
     642:	0e 94 ac 00 	call	0x158	; 0x158 <com_send_hex>
			com_send_hex(rx_pool_tail->data[2]);
     646:	e0 91 f1 05 	lds	r30, 0x05F1
     64a:	f0 91 f2 05 	lds	r31, 0x05F2
     64e:	83 81       	ldd	r24, Z+3	; 0x03
     650:	0e 94 ac 00 	call	0x158	; 0x158 <com_send_hex>
            com_send_hex(rx_pool_tail->data[6]);
     654:	e0 91 f1 05 	lds	r30, 0x05F1
     658:	f0 91 f2 05 	lds	r31, 0x05F2
     65c:	87 81       	ldd	r24, Z+7	; 0x07
     65e:	0e 94 ac 00 	call	0x158	; 0x158 <com_send_hex>
			com_send_hex(rx_pool_tail->data[5]);
     662:	e0 91 f1 05 	lds	r30, 0x05F1
     666:	f0 91 f2 05 	lds	r31, 0x05F2
     66a:	86 81       	ldd	r24, Z+6	; 0x06
     66c:	0e 94 ac 00 	call	0x158	; 0x158 <com_send_hex>
            com_send_hex(rx_pool_tail->data[8]);
     670:	e0 91 f1 05 	lds	r30, 0x05F1
     674:	f0 91 f2 05 	lds	r31, 0x05F2
     678:	81 85       	ldd	r24, Z+9	; 0x09
     67a:	0e 94 ac 00 	call	0x158	; 0x158 <com_send_hex>
			com_send_hex(rx_pool_tail->data[7]);
     67e:	e0 91 f1 05 	lds	r30, 0x05F1
     682:	f0 91 f2 05 	lds	r31, 0x05F2
     686:	80 85       	ldd	r24, Z+8	; 0x08
     688:	0e 94 ac 00 	call	0x158	; 0x158 <com_send_hex>
			com_send_hex(rx_pool_tail->data[12]);
     68c:	e0 91 f1 05 	lds	r30, 0x05F1
     690:	f0 91 f2 05 	lds	r31, 0x05F2
     694:	85 85       	ldd	r24, Z+13	; 0x0d
     696:	0e 94 ac 00 	call	0x158	; 0x158 <com_send_hex>
			com_send_hex(rx_pool_tail->data[13]);
     69a:	e0 91 f1 05 	lds	r30, 0x05F1
     69e:	f0 91 f2 05 	lds	r31, 0x05F2
     6a2:	86 85       	ldd	r24, Z+14	; 0x0e
     6a4:	0e 94 ac 00 	call	0x158	; 0x158 <com_send_hex>
			com_send_hex(rx_pool_tail->data[14]);
     6a8:	e0 91 f1 05 	lds	r30, 0x05F1
     6ac:	f0 91 f2 05 	lds	r31, 0x05F2
     6b0:	87 85       	ldd	r24, Z+15	; 0x0f
     6b2:	0e 94 ac 00 	call	0x158	; 0x158 <com_send_hex>
            com_send_hex(rx_pool_tail->data[16]);
     6b6:	e0 91 f1 05 	lds	r30, 0x05F1
     6ba:	f0 91 f2 05 	lds	r31, 0x05F2
     6be:	81 89       	ldd	r24, Z+17	; 0x11
     6c0:	0e 94 ac 00 	call	0x158	; 0x158 <com_send_hex>
			com_send_hex(rx_pool_tail->data[15]);
     6c4:	e0 91 f1 05 	lds	r30, 0x05F1
     6c8:	f0 91 f2 05 	lds	r31, 0x05F2
     6cc:	80 89       	ldd	r24, Z+16	; 0x10
     6ce:	0e 94 ac 00 	call	0x158	; 0x158 <com_send_hex>
            com_send_hex(rx_pool_tail->data[18]);
     6d2:	e0 91 f1 05 	lds	r30, 0x05F1
     6d6:	f0 91 f2 05 	lds	r31, 0x05F2
     6da:	83 89       	ldd	r24, Z+19	; 0x13
     6dc:	0e 94 ac 00 	call	0x158	; 0x158 <com_send_hex>
			com_send_hex(rx_pool_tail->data[17]);
     6e0:	e0 91 f1 05 	lds	r30, 0x05F1
     6e4:	f0 91 f2 05 	lds	r31, 0x05F2
     6e8:	82 89       	ldd	r24, Z+18	; 0x12
     6ea:	0e 94 ac 00 	call	0x158	; 0x158 <com_send_hex>
			hal_clear_data_led();
     6ee:	88 9a       	sbi	0x11, 0	; 17
        } // end: if (rx_pool_items_used != 0) ...
         
        //Check for rx_pool overflow.
        if (rx_pool_overflow_flag == true) {
     6f0:	80 91 f5 05 	lds	r24, 0x05F5
     6f4:	88 23       	and	r24, r24
     6f6:	e9 f0       	breq	.+58     	; 0x732 <main+0x2ce>
             
            cli();
     6f8:	f8 94       	cli
/*! \brief This function initialize the rx_pool. The rx_pool is in essence a FIFO.
 */
static void rx_pool_init( void )
{
 
    rx_pool_start = rx_pool;
     6fa:	10 93 ec 05 	sts	0x05EC, r17
     6fe:	00 93 eb 05 	sts	0x05EB, r16
    rx_pool_end = &rx_pool[ RX_POOL_SIZE - 1 ];
     702:	d0 93 ee 05 	sts	0x05EE, r29
     706:	c0 93 ed 05 	sts	0x05ED, r28
     
    rx_pool_head = rx_pool_start;
     70a:	10 93 f0 05 	sts	0x05F0, r17
     70e:	00 93 ef 05 	sts	0x05EF, r16
    rx_pool_tail = rx_pool_end;
     712:	d0 93 f2 05 	sts	0x05F2, r29
     716:	c0 93 f1 05 	sts	0x05F1, r28
     
    rx_pool_items_free = RX_POOL_SIZE;
     71a:	f0 92 f3 05 	sts	0x05F3, r15
    rx_pool_items_used = 0;
     71e:	10 92 f4 05 	sts	0x05F4, r1
     
    rx_pool_overflow_flag = false;
     722:	10 92 f5 05 	sts	0x05F5, r1
        //Check for rx_pool overflow.
        if (rx_pool_overflow_flag == true) {
             
            cli();
            rx_pool_init( );
            com_send_string( debug_rx_pool_overflow, sizeof( debug_rx_pool_overflow ) );
     726:	8a e5       	ldi	r24, 0x5A	; 90
     728:	92 e0       	ldi	r25, 0x02	; 2
     72a:	66 e1       	ldi	r22, 0x16	; 22
     72c:	0e 94 a0 00 	call	0x140	; 0x140 <com_send_string>
            sei();
     730:	78 94       	sei
        } // end: if (rx_pool_overflow_flag == true) ...
         
        //Check for new data on the serial interface.
        //Check if data is ready to be sent.
        length_of_received_data = com_get_number_of_received_bytes( );
     732:	0e 94 ae 01 	call	0x35c	; 0x35c <com_get_number_of_received_bytes>
     736:	80 93 62 03 	sts	0x0362, r24
     73a:	2f cf       	rjmp	.-418    	; 0x59a <main+0x136>

0000073c <trx_end_handler>:
 *
 *  \param[in] time_stamp Interrupt timestamp in IEEE 802.15.4 symbols.
 */
static void trx_end_handler( uint32_t time_stamp ){
     
    if (rx_flag == true) {
     73c:	80 91 f6 05 	lds	r24, 0x05F6
     740:	88 23       	and	r24, r24
     742:	c9 f1       	breq	.+114    	; 0x7b6 <trx_end_handler+0x7a>
         
        //Check if these is space left in the rx_pool.
        if (rx_pool_items_free == 0) {
     744:	80 91 f3 05 	lds	r24, 0x05F3
     748:	88 23       	and	r24, r24
     74a:	21 f4       	brne	.+8      	; 0x754 <trx_end_handler+0x18>
            rx_pool_overflow_flag = true;
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	80 93 f5 05 	sts	0x05F5, r24
     752:	08 95       	ret
        } else {
         
            //Space left, so upload the received frame.
            hal_frame_read( rx_pool_head );
     754:	80 91 ef 05 	lds	r24, 0x05EF
     758:	90 91 f0 05 	lds	r25, 0x05F0
     75c:	0e 94 1b 09 	call	0x1236	; 0x1236 <hal_frame_read>
             
            //Then check the CRC. Will not store frames with invalid CRC.
            if (rx_pool_head->crc == true) {
     760:	e0 91 ef 05 	lds	r30, 0x05EF
     764:	f0 91 f0 05 	lds	r31, 0x05F0
     768:	ef 57       	subi	r30, 0x7F	; 127
     76a:	ff 4f       	sbci	r31, 0xFF	; 255
     76c:	80 81       	ld	r24, Z
     76e:	e1 58       	subi	r30, 0x81	; 129
     770:	f0 40       	sbci	r31, 0x00	; 0
     772:	88 23       	and	r24, r24
     774:	01 f1       	breq	.+64     	; 0x7b6 <trx_end_handler+0x7a>
                 
                //Handle wrapping of rx_pool.
                if (rx_pool_head == rx_pool_end) {
     776:	80 91 ed 05 	lds	r24, 0x05ED
     77a:	90 91 ee 05 	lds	r25, 0x05EE
     77e:	e8 17       	cp	r30, r24
     780:	f9 07       	cpc	r31, r25
     782:	49 f4       	brne	.+18     	; 0x796 <trx_end_handler+0x5a>
                    rx_pool_head = rx_pool_start;
     784:	80 91 eb 05 	lds	r24, 0x05EB
     788:	90 91 ec 05 	lds	r25, 0x05EC
     78c:	90 93 f0 05 	sts	0x05F0, r25
     790:	80 93 ef 05 	sts	0x05EF, r24
     794:	06 c0       	rjmp	.+12     	; 0x7a2 <trx_end_handler+0x66>
                } else {
                    ++rx_pool_head;
     796:	ee 57       	subi	r30, 0x7E	; 126
     798:	ff 4f       	sbci	r31, 0xFF	; 255
     79a:	f0 93 f0 05 	sts	0x05F0, r31
     79e:	e0 93 ef 05 	sts	0x05EF, r30
                } // end: if (rx_pool_head == rx_pool_end) ...
                 
                --rx_pool_items_free;
     7a2:	80 91 f3 05 	lds	r24, 0x05F3
     7a6:	81 50       	subi	r24, 0x01	; 1
     7a8:	80 93 f3 05 	sts	0x05F3, r24
                ++rx_pool_items_used;
     7ac:	80 91 f4 05 	lds	r24, 0x05F4
     7b0:	8f 5f       	subi	r24, 0xFF	; 255
     7b2:	80 93 f4 05 	sts	0x05F4, r24
     7b6:	08 95       	ret

000007b8 <tat_reset_trx>:
 *
 *  \ingroup tat
 */
void tat_reset_trx( void ){

    hal_set_rst_low( );
     7b8:	2d 98       	cbi	0x05, 5	; 5
    hal_set_slptr_low( );
     7ba:	2c 98       	cbi	0x05, 4	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     7bc:	8e e0       	ldi	r24, 0x0E	; 14
     7be:	8a 95       	dec	r24
     7c0:	f1 f7       	brne	.-4      	; 0x7be <tat_reset_trx+0x6>
    delay_us( TIME_RESET );    
    hal_set_rst_high( );
     7c2:	2d 9a       	sbi	0x05, 5	; 5
}
     7c4:	08 95       	ret

000007c6 <tat_get_device_role>:
 *  \retval 1 Coordinator role enabled.
 *
 *  \ingroup tat
 */
uint8_t tat_get_device_role( void ){
    return hal_subregister_read( SR_I_AM_COORD);
     7c6:	8e e2       	ldi	r24, 0x2E	; 46
     7c8:	68 e0       	ldi	r22, 0x08	; 8
     7ca:	43 e0       	ldi	r20, 0x03	; 3
     7cc:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
}
     7d0:	08 95       	ret

000007d2 <tat_get_trx_state>:
 *                                 transition between two states.
 *   
 *  \ingroup tat
 */
uint8_t tat_get_trx_state( void ){
    return hal_subregister_read( SR_TRX_STATUS );
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	6f e1       	ldi	r22, 0x1F	; 31
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
}
     7dc:	08 95       	ret

000007de <tat_send_data_with_retry>:
 *  \retval TAT_WRONG_STATE if the radio transceiver is not in TX_ARET_ON.
 *
 *  \ingroup tat
 */
__x tat_status_t tat_send_data_with_retry( uint8_t frame_length, uint8_t *frame, 
                                       uint8_t retries ){ 
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	08 2f       	mov	r16, r24
     7e8:	eb 01       	movw	r28, r22
     7ea:	14 2f       	mov	r17, r20
    
    tat_status_t task_status = TAT_CHANNEL_ACCESS_FAILURE;          
    
    /*Do sanity check on function parameters and current state.*/
    if ((frame_length > RF231_MAX_TX_FRAME_LENGTH) || 
     7ec:	85 50       	subi	r24, 0x05	; 5
     7ee:	8b 37       	cpi	r24, 0x7B	; 123
     7f0:	10 f0       	brcs	.+4      	; 0x7f6 <tat_send_data_with_retry+0x18>
     7f2:	82 e4       	ldi	r24, 0x42	; 66
     7f4:	31 c0       	rjmp	.+98     	; 0x858 <tat_send_data_with_retry+0x7a>
 *                                 transition between two states.
 *   
 *  \ingroup tat
 */
uint8_t tat_get_trx_state( void ){
    return hal_subregister_read( SR_TRX_STATUS );
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	6f e1       	ldi	r22, 0x1F	; 31
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
    if ((frame_length > RF231_MAX_TX_FRAME_LENGTH) || 
        (frame_length < TAT_MIN_IEEE_FRAME_LENGTH)) { 
        return TAT_INVALID_ARGUMENT; 
    }
    
    if (tat_get_trx_state( ) != TX_ARET_ON) { return TAT_WRONG_STATE; }
     800:	89 31       	cpi	r24, 0x19	; 25
     802:	11 f0       	breq	.+4      	; 0x808 <tat_send_data_with_retry+0x2a>
     804:	84 e4       	ldi	r24, 0x44	; 68
     806:	28 c0       	rjmp	.+80     	; 0x858 <tat_send_data_with_retry+0x7a>
    
    hal_clear_trx_end_flag( );
     808:	0e 94 10 08 	call	0x1020	; 0x1020 <hal_clear_trx_end_flag>
    
    /*Do initial frame transmission.*/
    hal_set_slptr_high( );
     80c:	2c 9a       	sbi	0x05, 4	; 5
    hal_set_slptr_low( );
     80e:	2c 98       	cbi	0x05, 4	; 5
    hal_frame_write( frame, frame_length ); //Then write data to the frame buffer.
     810:	ce 01       	movw	r24, r28
     812:	60 2f       	mov	r22, r16
     814:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <hal_frame_write>
    
    /*Do retry if requested.*/
    do{
        
        //Wait for TRX_END interrupt.
        while (hal_get_trx_end_flag( ) == 0) {;}
     818:	0e 94 0d 08 	call	0x101a	; 0x101a <hal_get_trx_end_flag>
     81c:	88 23       	and	r24, r24
     81e:	e1 f3       	breq	.-8      	; 0x818 <tat_send_data_with_retry+0x3a>
        
        //Check status.
        uint8_t transaction_status = hal_subregister_read( SR_TRAC_STATUS );
     820:	82 e0       	ldi	r24, 0x02	; 2
     822:	60 ee       	ldi	r22, 0xE0	; 224
     824:	45 e0       	ldi	r20, 0x05	; 5
     826:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
        
        //Check for failure.
        if ((transaction_status != TAT_TRANSMISSION_SUCCESS)) {
     82a:	88 23       	and	r24, r24
     82c:	a1 f0       	breq	.+40     	; 0x856 <tat_send_data_with_retry+0x78>
            
            if (transaction_status == TAT_BUSY_CHANNEL) {
     82e:	83 30       	cpi	r24, 0x03	; 3
     830:	11 f0       	breq	.+4      	; 0x836 <tat_send_data_with_retry+0x58>
     832:	8e e4       	ldi	r24, 0x4E	; 78
     834:	01 c0       	rjmp	.+2      	; 0x838 <tat_send_data_with_retry+0x5a>
     836:	8d e4       	ldi	r24, 0x4D	; 77
                task_status = TAT_CHANNEL_ACCESS_FAILURE;
            } else {
                task_status = TAT_NO_ACK;
            }
            
            if ((retries--) > 0) {
     838:	11 23       	and	r17, r17
     83a:	71 f0       	breq	.+28     	; 0x858 <tat_send_data_with_retry+0x7a>
 *                                 transition between two states.
 *   
 *  \ingroup tat
 */
uint8_t tat_get_trx_state( void ){
    return hal_subregister_read( SR_TRX_STATUS );
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	6f e1       	ldi	r22, 0x1F	; 31
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
            if ((retries--) > 0) {
                
                retry = true;
                
                //Wait for the TRX to go back to TX_ARET_ON.
                while (tat_get_trx_state() != TX_ARET_ON) {;}
     846:	89 31       	cpi	r24, 0x19	; 25
     848:	c9 f7       	brne	.-14     	; 0x83c <tat_send_data_with_retry+0x5e>
                task_status = TAT_CHANNEL_ACCESS_FAILURE;
            } else {
                task_status = TAT_NO_ACK;
            }
            
            if ((retries--) > 0) {
     84a:	11 50       	subi	r17, 0x01	; 1
                retry = true;
                
                //Wait for the TRX to go back to TX_ARET_ON.
                while (tat_get_trx_state() != TX_ARET_ON) {;}
            
                hal_clear_trx_end_flag( );
     84c:	0e 94 10 08 	call	0x1020	; 0x1020 <hal_clear_trx_end_flag>
                hal_set_slptr_high( );
     850:	2c 9a       	sbi	0x05, 4	; 5
                hal_set_slptr_low( );
     852:	2c 98       	cbi	0x05, 4	; 5
     854:	e1 cf       	rjmp	.-62     	; 0x818 <tat_send_data_with_retry+0x3a>
     856:	80 e4       	ldi	r24, 0x40	; 64
            retry = false;            
        } // end: if ((transaction_status != TAT_TRANSMISSION_SUCCESS)) ...
    } while (retry == true);
    
    return task_status;                                       
}
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	08 95       	ret

00000862 <tat_send_data>:
 *                          PLL_ON and TX_ARET_ON state. If any other state is 
 *                          detected this error message will be returned.
 *
 *  \ingroup tat
 */
__x tat_status_t tat_send_data( uint8_t data_length, uint8_t *data ){
     862:	1f 93       	push	r17
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	18 2f       	mov	r17, r24
     86a:	eb 01       	movw	r28, r22
    
    /*Check function parameters and current state.*/
    if (data_length > RF231_MAX_TX_FRAME_LENGTH) { return TAT_INVALID_ARGUMENT; }
     86c:	87 ff       	sbrs	r24, 7
     86e:	02 c0       	rjmp	.+4      	; 0x874 <tat_send_data+0x12>
     870:	82 e4       	ldi	r24, 0x42	; 66
     872:	10 c0       	rjmp	.+32     	; 0x894 <tat_send_data+0x32>
 *                                 transition between two states.
 *   
 *  \ingroup tat
 */
uint8_t tat_get_trx_state( void ){
    return hal_subregister_read( SR_TRX_STATUS );
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	6f e1       	ldi	r22, 0x1F	; 31
     878:	40 e0       	ldi	r20, 0x00	; 0
     87a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
__x tat_status_t tat_send_data( uint8_t data_length, uint8_t *data ){
    
    /*Check function parameters and current state.*/
    if (data_length > RF231_MAX_TX_FRAME_LENGTH) { return TAT_INVALID_ARGUMENT; }
    
    if ((tat_get_trx_state( ) != PLL_ON)) { return TAT_WRONG_STATE; }
     87e:	89 30       	cpi	r24, 0x09	; 9
     880:	11 f0       	breq	.+4      	; 0x886 <tat_send_data+0x24>
     882:	84 e4       	ldi	r24, 0x44	; 68
     884:	07 c0       	rjmp	.+14     	; 0x894 <tat_send_data+0x32>
      
    /*Do frame transmission.*/
    //Toggle the SLP_TR pin to initiate the frame transmission.
    hal_set_slptr_high( );
     886:	2c 9a       	sbi	0x05, 4	; 5
    hal_set_slptr_low( );
     888:	2c 98       	cbi	0x05, 4	; 5
            
    hal_frame_write( data, data_length ); //Then write data to the frame buffer.
     88a:	ce 01       	movw	r24, r28
     88c:	61 2f       	mov	r22, r17
     88e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <hal_frame_write>
     892:	80 e4       	ldi	r24, 0x40	; 64
           
    return TAT_SUCCESS; 
}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	08 95       	ret

0000089c <tat_leave_sleep_mode>:
    
    bool sleeping = false;
    
    //The radio transceiver will be at SLEEP or one of the *_NOCLK states only if
    //the SLP_TR pin is high.
    if (hal_get_slptr( ) != 0) {
     89c:	1c 99       	sbic	0x03, 4	; 3
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <tat_leave_sleep_mode+0x8>
     8a0:	80 e4       	ldi	r24, 0x40	; 64
    if (tat_get_trx_state( ) == TRX_OFF) {
        leave_sleep_status = TAT_SUCCESS;
    }
    
    return leave_sleep_status;
}
     8a2:	08 95       	ret
tat_status_t tat_leave_sleep_mode( void ){
    
    //Check if the radio transceiver is actually sleeping.
    if (is_sleeping( ) == false) { return TAT_SUCCESS; }
    
    hal_set_slptr_low( );
     8a4:	2c 98       	cbi	0x05, 4	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8a6:	86 e5       	ldi	r24, 0x56	; 86
     8a8:	96 e0       	ldi	r25, 0x06	; 6
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	f1 f7       	brne	.-4      	; 0x8aa <tat_leave_sleep_mode+0xe>
 *                                 transition between two states.
 *   
 *  \ingroup tat
 */
uint8_t tat_get_trx_state( void ){
    return hal_subregister_read( SR_TRX_STATUS );
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	6f e1       	ldi	r22, 0x1F	; 31
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
    delay_us( TIME_SLEEP_TO_TRX_OFF );
    
    tat_status_t leave_sleep_status = TAT_TIMED_OUT;
    
    //Ensure that the radio transceiver is in the TRX_OFF state.
    if (tat_get_trx_state( ) == TRX_OFF) {
     8b8:	88 30       	cpi	r24, 0x08	; 8
     8ba:	91 f3       	breq	.-28     	; 0x8a0 <tat_leave_sleep_mode+0x4>
     8bc:	83 e4       	ldi	r24, 0x43	; 67
     8be:	08 95       	ret

000008c0 <tat_get_clock_speed>:
 *  \retval CLKM_16MHZ CLKM pin is not prescaled. Output is 16 MHz.
 *
 *  \ingroup tat
 */
uint8_t tat_get_clock_speed( void ){
    return hal_subregister_read( SR_CLKM_CTRL );
     8c0:	83 e0       	ldi	r24, 0x03	; 3
     8c2:	67 e0       	ldi	r22, 0x07	; 7
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
}
     8ca:	08 95       	ret

000008cc <tat_batmon_get_status>:
 */
tat_status_t tat_batmon_get_status( void ){
    
    tat_status_t batmon_status = TAT_BAT_LOW;
    
    if (hal_subregister_read( SR_BATMON_OK ) != 
     8cc:	81 e1       	ldi	r24, 0x11	; 17
     8ce:	60 e2       	ldi	r22, 0x20	; 32
     8d0:	45 e0       	ldi	r20, 0x05	; 5
     8d2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
     8d6:	88 23       	and	r24, r24
     8d8:	11 f0       	breq	.+4      	; 0x8de <tat_batmon_get_status+0x12>
     8da:	8b e4       	ldi	r24, 0x4B	; 75
     8dc:	08 95       	ret
     8de:	8a e4       	ldi	r24, 0x4A	; 74
        BATTERY_MONITOR_VOLTAGE_UNDER_THRESHOLD) {
        batmon_status = TAT_BAT_OK;
    }
    
    return batmon_status;
}
     8e0:	08 95       	ret

000008e2 <tat_batmon_get_voltage_range>:
 *  \retval 1 High voltage range selected.
 *
 *  \ingroup tat
 */
uint8_t tat_batmon_get_voltage_range( void ){
    return hal_subregister_read( SR_BATMON_HR );
     8e2:	81 e1       	ldi	r24, 0x11	; 17
     8e4:	60 e1       	ldi	r22, 0x10	; 16
     8e6:	44 e0       	ldi	r20, 0x04	; 4
     8e8:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
}
     8ec:	08 95       	ret

000008ee <tat_batmon_get_voltage_threshold>:
 *  \return Current threshold voltage, 0 to 15.
 *
 *  \ingroup tat
 */
uint8_t tat_batmon_get_voltage_threshold( void ){
    return hal_subregister_read( SR_BATMON_VTH );
     8ee:	81 e1       	ldi	r24, 0x11	; 17
     8f0:	6f e0       	ldi	r22, 0x0F	; 15
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
}
     8f8:	08 95       	ret

000008fa <tat_get_rssi_value>:
 *  \retval TAT_SUCCESS The RSSI measurement was successful.
 *  \retval TAT_WRONG_STATE The radio transceiver is not in RX_ON or BUSY_RX.
 *
 *  \ingroup tat
 */
tat_status_t tat_get_rssi_value( uint8_t *rssi ){
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	ec 01       	movw	r28, r24
 *                                 transition between two states.
 *   
 *  \ingroup tat
 */
uint8_t tat_get_trx_state( void ){
    return hal_subregister_read( SR_TRX_STATUS );
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	6f e1       	ldi	r22, 0x1F	; 31
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
    
    uint8_t current_state = tat_get_trx_state( );
    tat_status_t retval = TAT_WRONG_STATE;
    
    /*The RSSI measurement should only be done in RX_ON or BUSY_RX.*/
    if ((current_state == RX_ON) || (current_state == BUSY_RX)) {
     90a:	86 30       	cpi	r24, 0x06	; 6
     90c:	21 f0       	breq	.+8      	; 0x916 <tat_get_rssi_value+0x1c>
     90e:	81 30       	cpi	r24, 0x01	; 1
     910:	11 f0       	breq	.+4      	; 0x916 <tat_get_rssi_value+0x1c>
     912:	84 e4       	ldi	r24, 0x44	; 68
     914:	07 c0       	rjmp	.+14     	; 0x924 <tat_get_rssi_value+0x2a>
        
        *rssi = hal_subregister_read( SR_RSSI );
     916:	86 e0       	ldi	r24, 0x06	; 6
     918:	6f e1       	ldi	r22, 0x1F	; 31
     91a:	40 e0       	ldi	r20, 0x00	; 0
     91c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
     920:	88 83       	st	Y, r24
     922:	80 e4       	ldi	r24, 0x40	; 64
        retval = TAT_SUCCESS;
    }
    
    return retval;
}
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	08 95       	ret

0000092a <tat_get_ed_threshold>:
 *  \return Current ED threshold, 0 to 15.
 *
 *  \ingroup tat
 */
uint8_t tat_get_ed_threshold( void ){
    return hal_subregister_read( SR_CCA_ED_THRES );
     92a:	89 e0       	ldi	r24, 0x09	; 9
     92c:	6f e0       	ldi	r22, 0x0F	; 15
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
}
     934:	08 95       	ret

00000936 <tat_get_cca_mode>:
 *  \return CCA mode currently used, 0 to 3.
 *
 *  \ingroup tat
 */
uint8_t tat_get_cca_mode( void ){           
    return hal_subregister_read( SR_CCA_MODE );
     936:	88 e0       	ldi	r24, 0x08	; 8
     938:	60 e6       	ldi	r22, 0x60	; 96
     93a:	45 e0       	ldi	r20, 0x05	; 5
     93c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
}
     940:	08 95       	ret

00000942 <tat_get_tx_power_level>:
 *          the radio transceiver's datasheet
 *
 *  \ingroup tat
 */
uint8_t tat_get_tx_power_level( void ){
    return hal_subregister_read( SR_TX_PWR );
     942:	85 e0       	ldi	r24, 0x05	; 5
     944:	6f e0       	ldi	r22, 0x0F	; 15
     946:	40 e0       	ldi	r20, 0x00	; 0
     948:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
}
     94c:	08 95       	ret

0000094e <tat_get_operating_channel>:
 *  \return Current channel, 11 to 26.
 *
 *  \ingroup tat
 */
uint8_t tat_get_operating_channel( void ){
    return hal_subregister_read( SR_CHANNEL );
     94e:	88 e0       	ldi	r24, 0x08	; 8
     950:	6f e1       	ldi	r22, 0x1F	; 31
     952:	40 e0       	ldi	r20, 0x00	; 0
     954:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
}
     958:	08 95       	ret

0000095a <tat_set_device_role>:
void tat_set_device_role( bool i_am_coordinator ){
    
    if (i_am_coordinator == true) {
        hal_subregister_write( SR_I_AM_COORD, 0);
    } else {
        hal_subregister_write( SR_I_AM_COORD, 0);
     95a:	8e e2       	ldi	r24, 0x2E	; 46
     95c:	68 e0       	ldi	r22, 0x08	; 8
     95e:	43 e0       	ldi	r20, 0x03	; 3
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
     966:	08 95       	ret

00000968 <tat_use_auto_tx_crc>:
 *
 *  \ingroup tat
 */
void tat_use_auto_tx_crc( bool auto_crc_on ){
    
    if (auto_crc_on == true) {
     968:	88 23       	and	r24, r24
     96a:	29 f0       	breq	.+10     	; 0x976 <tat_use_auto_tx_crc+0xe>
        hal_subregister_write( SR_TX_AUTO_CRC_ON, 1 );
     96c:	84 e0       	ldi	r24, 0x04	; 4
     96e:	60 e2       	ldi	r22, 0x20	; 32
     970:	45 e0       	ldi	r20, 0x05	; 5
     972:	21 e0       	ldi	r18, 0x01	; 1
     974:	04 c0       	rjmp	.+8      	; 0x97e <tat_use_auto_tx_crc+0x16>
    } else {
        hal_subregister_write( SR_TX_AUTO_CRC_ON, 0 );
     976:	84 e0       	ldi	r24, 0x04	; 4
     978:	60 e2       	ldi	r22, 0x20	; 32
     97a:	45 e0       	ldi	r20, 0x05	; 5
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
     982:	08 95       	ret

00000984 <tat_reset_state_machine>:
 *
 *  \ingroup tat
 */
void tat_reset_state_machine( void ){
    
    hal_set_slptr_low( );
     984:	2c 98       	cbi	0x05, 4	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     986:	8e e0       	ldi	r24, 0x0E	; 14
     988:	8a 95       	dec	r24
     98a:	f1 f7       	brne	.-4      	; 0x988 <tat_reset_state_machine+0x4>
    delay_us( TIME_NOCLK_TO_WAKE );
    hal_subregister_write( SR_TRX_CMD, CMD_FORCE_TRX_OFF );
     98c:	82 e0       	ldi	r24, 0x02	; 2
     98e:	6f e1       	ldi	r22, 0x1F	; 31
     990:	40 e0       	ldi	r20, 0x00	; 0
     992:	23 e0       	ldi	r18, 0x03	; 3
     994:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	8a 95       	dec	r24
     99c:	f1 f7       	brne	.-4      	; 0x99a <tat_reset_state_machine+0x16>
    delay_us( TIME_CMD_FORCE_TRX_OFF );
}
     99e:	08 95       	ret

000009a0 <tat_enter_sleep_mode>:
    
    bool sleeping = false;
    
    //The radio transceiver will be at SLEEP or one of the *_NOCLK states only if
    //the SLP_TR pin is high.
    if (hal_get_slptr( ) != 0) {
     9a0:	1c 9b       	sbis	0x03, 4	; 3
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <tat_enter_sleep_mode+0x8>
     9a4:	80 e4       	ldi	r24, 0x40	; 64
     9a6:	08 95       	ret
 */
tat_status_t tat_enter_sleep_mode( void ){
    
    if (is_sleeping( ) == true) { return TAT_SUCCESS; }

    tat_reset_state_machine( ); //Force the device into TRX_OFF.
     9a8:	0e 94 c2 04 	call	0x984	; 0x984 <tat_reset_state_machine>
 *                                 transition between two states.
 *   
 *  \ingroup tat
 */
uint8_t tat_get_trx_state( void ){
    return hal_subregister_read( SR_TRX_STATUS );
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	6f e1       	ldi	r22, 0x1F	; 31
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>

    tat_reset_state_machine( ); //Force the device into TRX_OFF.
    
    tat_status_t enter_sleep_status = TAT_TIMED_OUT;
    
    if (tat_get_trx_state( ) == TRX_OFF) {
     9b6:	88 30       	cpi	r24, 0x08	; 8
     9b8:	11 f0       	breq	.+4      	; 0x9be <tat_enter_sleep_mode+0x1e>
     9ba:	83 e4       	ldi	r24, 0x43	; 67
     9bc:	08 95       	ret
            
        //Enter Sleep.
        hal_set_slptr_high( );    
     9be:	2c 9a       	sbi	0x05, 4	; 5
     9c0:	80 e4       	ldi	r24, 0x40	; 64
        enter_sleep_status = TAT_SUCCESS;
    }
    
    return enter_sleep_status;  
}
     9c2:	08 95       	ret

000009c4 <tat_set_trx_state>:
 *  \retval    TAT_TIMED_OUT        The state transition could not be completed 
 *                                  within resonable time.
 *
 *  \ingroup tat
 */
tat_status_t tat_set_trx_state( uint8_t new_state ){
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	08 2f       	mov	r16, r24
    
    /*Check function paramter and current state of the radio transceiver.*/
    if (!((new_state == TRX_OFF ) || (new_state == RX_ON) || (new_state == PLL_ON) || 
     9ca:	88 30       	cpi	r24, 0x08	; 8
     9cc:	51 f0       	breq	.+20     	; 0x9e2 <tat_set_trx_state+0x1e>
     9ce:	86 30       	cpi	r24, 0x06	; 6
     9d0:	41 f0       	breq	.+16     	; 0x9e2 <tat_set_trx_state+0x1e>
     9d2:	89 30       	cpi	r24, 0x09	; 9
     9d4:	31 f0       	breq	.+12     	; 0x9e2 <tat_set_trx_state+0x1e>
     9d6:	86 31       	cpi	r24, 0x16	; 22
     9d8:	21 f0       	breq	.+8      	; 0x9e2 <tat_set_trx_state+0x1e>
     9da:	89 31       	cpi	r24, 0x19	; 25
     9dc:	11 f0       	breq	.+4      	; 0x9e2 <tat_set_trx_state+0x1e>
     9de:	82 e4       	ldi	r24, 0x42	; 66
     9e0:	4b c0       	rjmp	.+150    	; 0xa78 <tat_set_trx_state+0xb4>
    
    bool sleeping = false;
    
    //The radio transceiver will be at SLEEP or one of the *_NOCLK states only if
    //the SLP_TR pin is high.
    if (hal_get_slptr( ) != 0) {
     9e2:	1c 9b       	sbis	0x03, 4	; 3
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <tat_set_trx_state+0x26>
     9e6:	84 e4       	ldi	r24, 0x44	; 68
     9e8:	47 c0       	rjmp	.+142    	; 0xa78 <tat_set_trx_state+0xb4>
 *                                 transition between two states.
 *   
 *  \ingroup tat
 */
uint8_t tat_get_trx_state( void ){
    return hal_subregister_read( SR_TRX_STATUS );
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	6f e1       	ldi	r22, 0x1F	; 31
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
     9f4:	18 2f       	mov	r17, r24
    
    if (is_sleeping( ) == true) { return TAT_WRONG_STATE; }
    
    uint8_t original_state = tat_get_trx_state( );
    
    if ((original_state == BUSY_RX ) || (original_state == BUSY_TX) || 
     9f6:	81 50       	subi	r24, 0x01	; 1
     9f8:	82 30       	cpi	r24, 0x02	; 2
     9fa:	08 f4       	brcc	.+2      	; 0x9fe <tat_set_trx_state+0x3a>
     9fc:	3a c0       	rjmp	.+116    	; 0xa72 <tat_set_trx_state+0xae>
     9fe:	11 31       	cpi	r17, 0x11	; 17
     a00:	c1 f1       	breq	.+112    	; 0xa72 <tat_set_trx_state+0xae>
     a02:	12 31       	cpi	r17, 0x12	; 18
     a04:	b1 f1       	breq	.+108    	; 0xa72 <tat_set_trx_state+0xae>
        (original_state == BUSY_RX_AACK) || (original_state == BUSY_TX_ARET)) { 
        return TAT_BUSY_STATE;
    }
    
    if (new_state == original_state) { return TAT_SUCCESS; }
     a06:	01 17       	cp	r16, r17
     a08:	b1 f1       	breq	.+108    	; 0xa76 <tat_set_trx_state+0xb2>
    //At this point it is clear that the requested new_state is:
    //TRX_OFF, RX_ON, PLL_ON, RX_AACK_ON or TX_ARET_ON.
                
    //The radio transceiver can be in one of the following states:
    //TRX_OFF, RX_ON, PLL_ON, RX_AACK_ON, TX_ARET_ON.
    if( new_state == TRX_OFF ){
     a0a:	08 30       	cpi	r16, 0x08	; 8
     a0c:	19 f4       	brne	.+6      	; 0xa14 <tat_set_trx_state+0x50>
        tat_reset_state_machine( ); //Go to TRX_OFF from any state.
     a0e:	0e 94 c2 04 	call	0x984	; 0x984 <tat_reset_state_machine>
     a12:	26 c0       	rjmp	.+76     	; 0xa60 <tat_set_trx_state+0x9c>
    } else {
        
        //It is not allowed to go from RX_AACK_ON or TX_AACK_ON and directly to
        //TX_AACK_ON or RX_AACK_ON respectively. Need to go via RX_ON or PLL_ON.
        if ((new_state == TX_ARET_ON) && (original_state == RX_AACK_ON)) {
     a14:	09 31       	cpi	r16, 0x19	; 25
     a16:	39 f4       	brne	.+14     	; 0xa26 <tat_set_trx_state+0x62>
     a18:	16 31       	cpi	r17, 0x16	; 22
     a1a:	91 f4       	brne	.+36     	; 0xa40 <tat_set_trx_state+0x7c>
            
            //First do intermediate state transition to PLL_ON, then to TX_ARET_ON.
            //The final state transition to TX_ARET_ON is handled after the if-else if.
            hal_subregister_write( SR_TRX_CMD, PLL_ON );
     a1c:	82 e0       	ldi	r24, 0x02	; 2
     a1e:	6f e1       	ldi	r22, 0x1F	; 31
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	29 e0       	ldi	r18, 0x09	; 9
     a24:	08 c0       	rjmp	.+16     	; 0xa36 <tat_set_trx_state+0x72>
            delay_us( TIME_STATE_TRANSITION_PLL_ACTIVE );
        } else if ((new_state == RX_AACK_ON) && (original_state == TX_ARET_ON)) {
     a26:	06 31       	cpi	r16, 0x16	; 22
     a28:	59 f4       	brne	.+22     	; 0xa40 <tat_set_trx_state+0x7c>
     a2a:	19 31       	cpi	r17, 0x19	; 25
     a2c:	49 f4       	brne	.+18     	; 0xa40 <tat_set_trx_state+0x7c>
            
            //First do intermediate state transition to RX_ON, then to RX_AACK_ON.
            //The final state transition to RX_AACK_ON is handled after the if-else if.
            hal_subregister_write( SR_TRX_CMD, RX_ON );
     a2e:	82 e0       	ldi	r24, 0x02	; 2
     a30:	6f e1       	ldi	r22, 0x1F	; 31
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	26 e0       	ldi	r18, 0x06	; 6
     a36:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
     a3a:	82 e0       	ldi	r24, 0x02	; 2
     a3c:	8a 95       	dec	r24
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <tat_set_trx_state+0x78>
            delay_us( TIME_STATE_TRANSITION_PLL_ACTIVE );
        }
            
        //Any other state transition can be done directly.    
        hal_subregister_write( SR_TRX_CMD, new_state );
     a40:	82 e0       	ldi	r24, 0x02	; 2
     a42:	6f e1       	ldi	r22, 0x1F	; 31
     a44:	40 e0       	ldi	r20, 0x00	; 0
     a46:	20 2f       	mov	r18, r16
     a48:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
        
        //When the PLL is active most states can be reached in 1us. However, from
        //TRX_OFF the PLL needs time to activate.
        if (original_state == TRX_OFF) {
     a4c:	18 30       	cpi	r17, 0x08	; 8
     a4e:	29 f4       	brne	.+10     	; 0xa5a <tat_set_trx_state+0x96>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a50:	8b e4       	ldi	r24, 0x4B	; 75
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	f1 f7       	brne	.-4      	; 0xa54 <tat_set_trx_state+0x90>
     a58:	03 c0       	rjmp	.+6      	; 0xa60 <tat_set_trx_state+0x9c>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a5a:	82 e0       	ldi	r24, 0x02	; 2
     a5c:	8a 95       	dec	r24
     a5e:	f1 f7       	brne	.-4      	; 0xa5c <tat_set_trx_state+0x98>
 *                                 transition between two states.
 *   
 *  \ingroup tat
 */
uint8_t tat_get_trx_state( void ){
    return hal_subregister_read( SR_TRX_STATUS );
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	6f e1       	ldi	r22, 0x1F	; 31
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
    } // end: if( new_state == TRX_OFF ) ...
        
    /*Verify state transition.*/
    tat_status_t set_state_status = TAT_TIMED_OUT;
    
    if( tat_get_trx_state( ) == new_state ){ set_state_status = TAT_SUCCESS; }
     a6a:	80 17       	cp	r24, r16
     a6c:	21 f0       	breq	.+8      	; 0xa76 <tat_set_trx_state+0xb2>
     a6e:	83 e4       	ldi	r24, 0x43	; 67
     a70:	03 c0       	rjmp	.+6      	; 0xa78 <tat_set_trx_state+0xb4>
     a72:	85 e4       	ldi	r24, 0x45	; 69
     a74:	01 c0       	rjmp	.+2      	; 0xa78 <tat_set_trx_state+0xb4>
     a76:	80 e4       	ldi	r24, 0x40	; 64
    
    return set_state_status;
}
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	08 95       	ret

00000a7e <tat_calibrate_filter>:
 *                                 transition between two states.
 *   
 *  \ingroup tat
 */
uint8_t tat_get_trx_state( void ){
    return hal_subregister_read( SR_TRX_STATUS );
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	6f e1       	ldi	r22, 0x1F	; 31
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
tat_status_t tat_calibrate_filter( void ){
    
    /*Check current state. Only possible to do filter calibration from TRX_OFF or PLL_ON.*/
    uint8_t trx_state = tat_get_trx_state( );
    
    if ((trx_state != TRX_OFF ) && (trx_state != PLL_ON)) { return TAT_WRONG_STATE; }
     a88:	88 50       	subi	r24, 0x08	; 8
     a8a:	82 30       	cpi	r24, 0x02	; 2
     a8c:	10 f0       	brcs	.+4      	; 0xa92 <tat_calibrate_filter+0x14>
     a8e:	84 e4       	ldi	r24, 0x44	; 68
     a90:	08 95       	ret
        
    //Start the tuning algorithm by writing one to the FTN_START subregister.
    hal_subregister_write( SR_FTN_START, 1 );   
     a92:	88 e1       	ldi	r24, 0x18	; 24
     a94:	60 e8       	ldi	r22, 0x80	; 128
     a96:	47 e0       	ldi	r20, 0x07	; 7
     a98:	21 e0       	ldi	r18, 0x01	; 1
     a9a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
     a9e:	8d e3       	ldi	r24, 0x3D	; 61
     aa0:	8a 95       	dec	r24
     aa2:	f1 f7       	brne	.-4      	; 0xaa0 <tat_calibrate_filter+0x22>
    delay_us( TIME_FTN_TUNING ); //Wait for the calibration to finish.
    
    tat_status_t filter_calibration_status = TAT_TIMED_OUT;    
    
    //Verify the calibration result.
    if (hal_subregister_read( SR_FTN_START ) == FTN_CALIBRATION_DONE) {
     aa4:	88 e1       	ldi	r24, 0x18	; 24
     aa6:	60 e8       	ldi	r22, 0x80	; 128
     aa8:	47 e0       	ldi	r20, 0x07	; 7
     aaa:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
     aae:	88 23       	and	r24, r24
     ab0:	11 f4       	brne	.+4      	; 0xab6 <tat_calibrate_filter+0x38>
     ab2:	80 e4       	ldi	r24, 0x40	; 64
     ab4:	08 95       	ret
     ab6:	83 e4       	ldi	r24, 0x43	; 67
        filter_calibration_status = TAT_SUCCESS;
    }
    
    return filter_calibration_status;
}
     ab8:	08 95       	ret

00000aba <tat_set_clock_speed>:
 *  \retval TAT_SUCCESS Clock speed updated. New state is TRX_OFF.
 *  \retval TAT_INVALID_ARGUMENT Requested clock speed is out of bounds.
 *  
 * \ingroup tat
 */
tat_status_t tat_set_clock_speed( bool direct, uint8_t clock_speed ){
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	08 2f       	mov	r16, r24
     ac0:	16 2f       	mov	r17, r22
    
    /*Check function parameter and current clock speed.*/
    if (clock_speed > CLKM_16MHZ) { return TAT_INVALID_ARGUMENT; }
     ac2:	66 30       	cpi	r22, 0x06	; 6
     ac4:	10 f0       	brcs	.+4      	; 0xaca <tat_set_clock_speed+0x10>
     ac6:	82 e4       	ldi	r24, 0x42	; 66
     ac8:	1b c0       	rjmp	.+54     	; 0xb00 <tat_set_clock_speed+0x46>
 *  \retval CLKM_16MHZ CLKM pin is not prescaled. Output is 16 MHz.
 *
 *  \ingroup tat
 */
uint8_t tat_get_clock_speed( void ){
    return hal_subregister_read( SR_CLKM_CTRL );
     aca:	83 e0       	ldi	r24, 0x03	; 3
     acc:	67 e0       	ldi	r22, 0x07	; 7
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
tat_status_t tat_set_clock_speed( bool direct, uint8_t clock_speed ){
    
    /*Check function parameter and current clock speed.*/
    if (clock_speed > CLKM_16MHZ) { return TAT_INVALID_ARGUMENT; }
        
    if (tat_get_clock_speed( ) == clock_speed) { return TAT_SUCCESS; }
     ad4:	81 17       	cp	r24, r17
     ad6:	99 f0       	breq	.+38     	; 0xafe <tat_set_clock_speed+0x44>
    
    /*Select to change the CLKM frequency directly or after returning from SLEEP.*/
    if (direct == false) {
     ad8:	00 23       	and	r16, r16
     ada:	29 f4       	brne	.+10     	; 0xae6 <tat_set_clock_speed+0x2c>
        hal_subregister_write( SR_CLKM_SHA_SEL, 1 );
     adc:	83 e0       	ldi	r24, 0x03	; 3
     ade:	68 e0       	ldi	r22, 0x08	; 8
     ae0:	43 e0       	ldi	r20, 0x03	; 3
     ae2:	21 e0       	ldi	r18, 0x01	; 1
     ae4:	04 c0       	rjmp	.+8      	; 0xaee <tat_set_clock_speed+0x34>
    } else {
        hal_subregister_write( SR_CLKM_SHA_SEL, 0 );
     ae6:	83 e0       	ldi	r24, 0x03	; 3
     ae8:	68 e0       	ldi	r22, 0x08	; 8
     aea:	43 e0       	ldi	r20, 0x03	; 3
     aec:	20 e0       	ldi	r18, 0x00	; 0
     aee:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
    } // end: if (direct == false) ...
            
    hal_subregister_write( SR_CLKM_CTRL, clock_speed );
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	67 e0       	ldi	r22, 0x07	; 7
     af6:	40 e0       	ldi	r20, 0x00	; 0
     af8:	21 2f       	mov	r18, r17
     afa:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
     afe:	80 e4       	ldi	r24, 0x40	; 64
                
    return TAT_SUCCESS;
}
     b00:	1f 91       	pop	r17
     b02:	0f 91       	pop	r16
     b04:	08 95       	ret

00000b06 <tat_batmon_configure>:
 *  \retval TAT_WRONG_STATE The device is sleeping.
 *  \retval TAT_INVALID_ARGUMENT The voltage_threshold parameter is out of 
 *                               bounds (Not within [0 - 15]).
 *  \ingroup tat
 */
tat_status_t tat_batmon_configure( bool range, uint8_t voltage_threshold ){
     b06:	1f 93       	push	r17
     b08:	16 2f       	mov	r17, r22
     
    /*Check function parameters and state.*/
    if (voltage_threshold > BATTERY_MONITOR_HIGHEST_VOLTAGE) {
     b0a:	60 31       	cpi	r22, 0x10	; 16
     b0c:	10 f0       	brcs	.+4      	; 0xb12 <tat_batmon_configure+0xc>
     b0e:	82 e4       	ldi	r24, 0x42	; 66
     b10:	18 c0       	rjmp	.+48     	; 0xb42 <tat_batmon_configure+0x3c>
    
    bool sleeping = false;
    
    //The radio transceiver will be at SLEEP or one of the *_NOCLK states only if
    //the SLP_TR pin is high.
    if (hal_get_slptr( ) != 0) {
     b12:	1c 9b       	sbis	0x03, 4	; 3
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <tat_batmon_configure+0x14>
     b16:	84 e4       	ldi	r24, 0x44	; 68
     b18:	14 c0       	rjmp	.+40     	; 0xb42 <tat_batmon_configure+0x3c>
    }   
    
    if (is_sleeping( ) == true) { return TAT_WRONG_STATE; }
    
    /*Write new voltage range and voltage level.*/
    if (range == true) {
     b1a:	88 23       	and	r24, r24
     b1c:	29 f0       	breq	.+10     	; 0xb28 <tat_batmon_configure+0x22>
        hal_subregister_write( SR_BATMON_HR, BATTERY_MONITOR_HIGH_VOLTAGE );
     b1e:	81 e1       	ldi	r24, 0x11	; 17
     b20:	60 e1       	ldi	r22, 0x10	; 16
     b22:	44 e0       	ldi	r20, 0x04	; 4
     b24:	21 e0       	ldi	r18, 0x01	; 1
     b26:	04 c0       	rjmp	.+8      	; 0xb30 <tat_batmon_configure+0x2a>
    } else {
        hal_subregister_write( SR_BATMON_HR, BATTERY_MONITOR_LOW_VOLTAGE );
     b28:	81 e1       	ldi	r24, 0x11	; 17
     b2a:	60 e1       	ldi	r22, 0x10	; 16
     b2c:	44 e0       	ldi	r20, 0x04	; 4
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
    } // end: if (range == true) ...
    
    hal_subregister_write( SR_BATMON_VTH, voltage_threshold );
     b34:	81 e1       	ldi	r24, 0x11	; 17
     b36:	6f e0       	ldi	r22, 0x0F	; 15
     b38:	40 e0       	ldi	r20, 0x00	; 0
     b3a:	21 2f       	mov	r18, r17
     b3c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
     b40:	80 e4       	ldi	r24, 0x40	; 64
       
    return TAT_SUCCESS;
}
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <tat_set_cca_mode>:
 *  \retval TAT_INVALID_ARGUMENT If one of the three function arguments are out 
 *                               of bounds.
 *
 *  \ingroup tat
 */
tat_status_t tat_set_cca_mode( uint8_t mode, uint8_t ed_threshold ){
     b46:	1f 93       	push	r17
     b48:	28 2f       	mov	r18, r24
     b4a:	16 2f       	mov	r17, r22
    
    /*Check function parameters and state.*/
    if ((mode != CCA_ED) && (mode != CCA_CARRIER_SENSE) && 
     b4c:	83 30       	cpi	r24, 0x03	; 3
     b4e:	98 f4       	brcc	.+38     	; 0xb76 <tat_set_cca_mode+0x30>
        (mode != CCA_CARRIER_SENSE_WITH_ED)) {
        return TAT_INVALID_ARGUMENT;
    } 
       
    //Ensure that the ED threshold is within bounds.
    if (ed_threshold > RF231_MAX_ED_THRESHOLD) { return TAT_INVALID_ARGUMENT; } 
     b50:	60 31       	cpi	r22, 0x10	; 16
     b52:	88 f4       	brcc	.+34     	; 0xb76 <tat_set_cca_mode+0x30>
    
    bool sleeping = false;
    
    //The radio transceiver will be at SLEEP or one of the *_NOCLK states only if
    //the SLP_TR pin is high.
    if (hal_get_slptr( ) != 0) {
     b54:	1c 9b       	sbis	0x03, 4	; 3
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <tat_set_cca_mode+0x16>
     b58:	84 e4       	ldi	r24, 0x44	; 68
     b5a:	0e c0       	rjmp	.+28     	; 0xb78 <tat_set_cca_mode+0x32>
            
    //Ensure that the radio transceiver is not sleeping.
    if (is_sleeping( ) == true) { return TAT_WRONG_STATE; } 
                
    /*Change cca mode and ed threshold.*/
    hal_subregister_write( SR_CCA_MODE, mode );
     b5c:	88 e0       	ldi	r24, 0x08	; 8
     b5e:	60 e6       	ldi	r22, 0x60	; 96
     b60:	45 e0       	ldi	r20, 0x05	; 5
     b62:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
    hal_subregister_write( SR_CCA_ED_THRES, ed_threshold );
     b66:	89 e0       	ldi	r24, 0x09	; 9
     b68:	6f e0       	ldi	r22, 0x0F	; 15
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	21 2f       	mov	r18, r17
     b6e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
     b72:	80 e4       	ldi	r24, 0x40	; 64
     b74:	01 c0       	rjmp	.+2      	; 0xb78 <tat_set_cca_mode+0x32>
        
    return TAT_SUCCESS;
     b76:	82 e4       	ldi	r24, 0x42	; 66
}
     b78:	1f 91       	pop	r17
     b7a:	08 95       	ret

00000b7c <tat_set_tx_power_level>:
 *  \retval TAT_WRONG_STATE It is not possible to change the TX power when the 
 *                          device is sleeping.
 *
 *  \ingroup tat
 */
tat_status_t tat_set_tx_power_level( uint8_t power_level ){
     b7c:	28 2f       	mov	r18, r24
        
    /*Check function parameter and state.*/
    if (power_level > TX_PWR_17_2DBM) { return TAT_INVALID_ARGUMENT; }
     b7e:	80 31       	cpi	r24, 0x10	; 16
     b80:	10 f0       	brcs	.+4      	; 0xb86 <tat_set_tx_power_level+0xa>
     b82:	82 e4       	ldi	r24, 0x42	; 66
     b84:	08 95       	ret
    
    bool sleeping = false;
    
    //The radio transceiver will be at SLEEP or one of the *_NOCLK states only if
    //the SLP_TR pin is high.
    if (hal_get_slptr( ) != 0) {
     b86:	1c 9b       	sbis	0x03, 4	; 3
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <tat_set_tx_power_level+0x12>
     b8a:	84 e4       	ldi	r24, 0x44	; 68
     b8c:	08 95       	ret
    if (power_level > TX_PWR_17_2DBM) { return TAT_INVALID_ARGUMENT; }
    
    if (is_sleeping( ) == true) { return TAT_WRONG_STATE; }
    
    /*Set new power level*/
    hal_subregister_write( SR_TX_PWR, power_level );
     b8e:	85 e0       	ldi	r24, 0x05	; 5
     b90:	6f e0       	ldi	r22, 0x0F	; 15
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
     b98:	80 e4       	ldi	r24, 0x40	; 64
        
    return TAT_SUCCESS;
}
     b9a:	08 95       	ret

00000b9c <tat_set_operating_channel>:
 *  \retval TAT_INVALID_ARGUMENT Channel argument is out of bounds.
 *  \retval TAT_TIMED_OUT The PLL did not lock within the specified time.
 *
 *  \ingroup tat
 */
tat_status_t tat_set_operating_channel( uint8_t channel ){
     b9c:	1f 93       	push	r17
     b9e:	18 2f       	mov	r17, r24
    
    /*Do function parameter and state check.*/
    if ((channel < RF231_MIN_CHANNEL) || (channel > RF231_MAX_CHANNEL)) {
     ba0:	8b 50       	subi	r24, 0x0B	; 11
     ba2:	80 31       	cpi	r24, 0x10	; 16
     ba4:	10 f0       	brcs	.+4      	; 0xbaa <tat_set_operating_channel+0xe>
     ba6:	82 e4       	ldi	r24, 0x42	; 66
     ba8:	28 c0       	rjmp	.+80     	; 0xbfa <tat_set_operating_channel+0x5e>
    
    bool sleeping = false;
    
    //The radio transceiver will be at SLEEP or one of the *_NOCLK states only if
    //the SLP_TR pin is high.
    if (hal_get_slptr( ) != 0) {
     baa:	1c 9b       	sbis	0x03, 4	; 3
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <tat_set_operating_channel+0x16>
     bae:	84 e4       	ldi	r24, 0x44	; 68
     bb0:	24 c0       	rjmp	.+72     	; 0xbfa <tat_set_operating_channel+0x5e>
 *  \return Current channel, 11 to 26.
 *
 *  \ingroup tat
 */
uint8_t tat_get_operating_channel( void ){
    return hal_subregister_read( SR_CHANNEL );
     bb2:	88 e0       	ldi	r24, 0x08	; 8
     bb4:	6f e1       	ldi	r22, 0x1F	; 31
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
        return TAT_INVALID_ARGUMENT;
    }
    
    if (is_sleeping( ) == true) { return TAT_WRONG_STATE; }
    
    if (tat_get_operating_channel( ) == channel) { return TAT_SUCCESS; }
     bbc:	81 17       	cp	r24, r17
     bbe:	e1 f0       	breq	.+56     	; 0xbf8 <tat_set_operating_channel+0x5c>
    
    /*Set new operating channel.*/        
    hal_subregister_write( SR_CHANNEL, channel );
     bc0:	88 e0       	ldi	r24, 0x08	; 8
     bc2:	6f e1       	ldi	r22, 0x1F	; 31
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	21 2f       	mov	r18, r17
     bc8:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
 *                                 transition between two states.
 *   
 *  \ingroup tat
 */
uint8_t tat_get_trx_state( void ){
    return hal_subregister_read( SR_TRX_STATUS );
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	6f e1       	ldi	r22, 0x1F	; 31
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
                
    //Read current state and wait for the PLL_LOCK interrupt if the
    //radio transceiver is in either RX_ON or PLL_ON.
    uint8_t trx_state = tat_get_trx_state( );
                
    if ((trx_state == RX_ON) || (trx_state == PLL_ON)) {
     bd6:	86 30       	cpi	r24, 0x06	; 6
     bd8:	11 f0       	breq	.+4      	; 0xbde <tat_set_operating_channel+0x42>
     bda:	89 30       	cpi	r24, 0x09	; 9
     bdc:	21 f4       	brne	.+8      	; 0xbe6 <tat_set_operating_channel+0x4a>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bde:	84 e1       	ldi	r24, 0x14	; 20
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	f1 f7       	brne	.-4      	; 0xbe2 <tat_set_operating_channel+0x46>
 *  \return Current channel, 11 to 26.
 *
 *  \ingroup tat
 */
uint8_t tat_get_operating_channel( void ){
    return hal_subregister_read( SR_CHANNEL );
     be6:	88 e0       	ldi	r24, 0x08	; 8
     be8:	6f e1       	ldi	r22, 0x1F	; 31
     bea:	40 e0       	ldi	r20, 0x00	; 0
     bec:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
    }
    
    tat_status_t channel_set_status = TAT_TIMED_OUT;
    
    //Check that the channel was set properly.
    if (tat_get_operating_channel( ) == channel) {
     bf0:	81 17       	cp	r24, r17
     bf2:	11 f0       	breq	.+4      	; 0xbf8 <tat_set_operating_channel+0x5c>
     bf4:	83 e4       	ldi	r24, 0x43	; 67
     bf6:	01 c0       	rjmp	.+2      	; 0xbfa <tat_set_operating_channel+0x5e>
     bf8:	80 e4       	ldi	r24, 0x40	; 64
        channel_set_status = TAT_SUCCESS;
    }
    
    return channel_set_status;
}
     bfa:	1f 91       	pop	r17
     bfc:	08 95       	ret

00000bfe <tat_configure_csma>:
 *  \retval TAT_WRONG_STATE This function should not be called in the 
 *                          SLEEP state.
 *
 *  \ingroup tat
 */
tat_status_t tat_configure_csma( uint8_t seed0, uint8_t be_csma_seed1 ){
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	08 2f       	mov	r16, r24
     c04:	16 2f       	mov	r17, r22
    
    bool sleeping = false;
    
    //The radio transceiver will be at SLEEP or one of the *_NOCLK states only if
    //the SLP_TR pin is high.
    if (hal_get_slptr( ) != 0) {
     c06:	1c 9b       	sbis	0x03, 4	; 3
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <tat_configure_csma+0x10>
     c0a:	84 e4       	ldi	r24, 0x44	; 68
     c0c:	2a c0       	rjmp	.+84     	; 0xc62 <tat_configure_csma+0x64>
    /*Extract parameters, and configure the CSMA-CA algorithm.*/
    uint8_t back_off_exponent = ( be_csma_seed1 & 0xC0 ) >> 6;
    uint8_t csma_retries      = ( be_csma_seed1 & 0x38 ) >> 3;
    uint8_t seed1             = ( be_csma_seed1 & 0x07 );
            
    hal_subregister_write( SR_MAX_FRAME_RETRIES, 0 ); //AT86RF231 rev A errata.
     c0e:	8c e2       	ldi	r24, 0x2C	; 44
     c10:	60 ef       	ldi	r22, 0xF0	; 240
     c12:	44 e0       	ldi	r20, 0x04	; 4
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
    hal_subregister_write( SR_MAX_CSMA_RETRIES, csma_retries );
     c1a:	21 2f       	mov	r18, r17
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	28 73       	andi	r18, 0x38	; 56
     c20:	30 70       	andi	r19, 0x00	; 0
     c22:	83 e0       	ldi	r24, 0x03	; 3
     c24:	35 95       	asr	r19
     c26:	27 95       	ror	r18
     c28:	8a 95       	dec	r24
     c2a:	e1 f7       	brne	.-8      	; 0xc24 <tat_configure_csma+0x26>
     c2c:	8c e2       	ldi	r24, 0x2C	; 44
     c2e:	6e e0       	ldi	r22, 0x0E	; 14
     c30:	41 e0       	ldi	r20, 0x01	; 1
     c32:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
    hal_subregister_write( SR_MIN_BE, back_off_exponent );
     c36:	21 2f       	mov	r18, r17
     c38:	22 95       	swap	r18
     c3a:	26 95       	lsr	r18
     c3c:	26 95       	lsr	r18
     c3e:	23 70       	andi	r18, 0x03	; 3
     c40:	8f e2       	ldi	r24, 0x2F	; 47
     c42:	6f e0       	ldi	r22, 0x0F	; 15
     c44:	40 e0       	ldi	r20, 0x00	; 0
     c46:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
    hal_register_write( RG_CSMA_SEED_0, seed0 );
     c4a:	8d e2       	ldi	r24, 0x2D	; 45
     c4c:	60 2f       	mov	r22, r16
     c4e:	0e 94 cf 08 	call	0x119e	; 0x119e <hal_register_write>
    hal_subregister_write( SR_CSMA_SEED_1, seed1 );
     c52:	17 70       	andi	r17, 0x07	; 7
     c54:	8e e2       	ldi	r24, 0x2E	; 46
     c56:	67 e0       	ldi	r22, 0x07	; 7
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	21 2f       	mov	r18, r17
     c5c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
     c60:	80 e4       	ldi	r24, 0x40	; 64
            
    return TAT_SUCCESS;
}
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	08 95       	ret

00000c68 <tat_set_extended_address>:
 *
 *  \param  new_extended_address Extended address to be used by the address filter. 
 *
 *  \ingroup tat
 */
__x void tat_set_extended_address( uint8_t *extended_address ){
     c68:	af 92       	push	r10
     c6a:	bf 92       	push	r11
     c6c:	cf 92       	push	r12
     c6e:	df 92       	push	r13
     c70:	ef 92       	push	r14
     c72:	ff 92       	push	r15
     c74:	0f 93       	push	r16
     c76:	1f 93       	push	r17
     c78:	8c 01       	movw	r16, r24
    
    hal_register_write( RG_IEEE_ADDR_7, *extended_address++ );
     c7a:	7c 01       	movw	r14, r24
     c7c:	08 94       	sec
     c7e:	e1 1c       	adc	r14, r1
     c80:	f1 1c       	adc	r15, r1
     c82:	8b e2       	ldi	r24, 0x2B	; 43
     c84:	f8 01       	movw	r30, r16
     c86:	60 81       	ld	r22, Z
     c88:	0e 94 cf 08 	call	0x119e	; 0x119e <hal_register_write>
    hal_register_write( RG_IEEE_ADDR_6, *extended_address++ );
     c8c:	67 01       	movw	r12, r14
     c8e:	08 94       	sec
     c90:	c1 1c       	adc	r12, r1
     c92:	d1 1c       	adc	r13, r1
     c94:	8a e2       	ldi	r24, 0x2A	; 42
     c96:	f8 01       	movw	r30, r16
     c98:	61 81       	ldd	r22, Z+1	; 0x01
     c9a:	0e 94 cf 08 	call	0x119e	; 0x119e <hal_register_write>
    hal_register_write( RG_IEEE_ADDR_5, *extended_address++ );
     c9e:	56 01       	movw	r10, r12
     ca0:	08 94       	sec
     ca2:	a1 1c       	adc	r10, r1
     ca4:	b1 1c       	adc	r11, r1
     ca6:	89 e2       	ldi	r24, 0x29	; 41
     ca8:	f7 01       	movw	r30, r14
     caa:	61 81       	ldd	r22, Z+1	; 0x01
     cac:	0e 94 cf 08 	call	0x119e	; 0x119e <hal_register_write>
    hal_register_write( RG_IEEE_ADDR_4, *extended_address++ );
     cb0:	75 01       	movw	r14, r10
     cb2:	08 94       	sec
     cb4:	e1 1c       	adc	r14, r1
     cb6:	f1 1c       	adc	r15, r1
     cb8:	88 e2       	ldi	r24, 0x28	; 40
     cba:	f6 01       	movw	r30, r12
     cbc:	61 81       	ldd	r22, Z+1	; 0x01
     cbe:	0e 94 cf 08 	call	0x119e	; 0x119e <hal_register_write>
    hal_register_write( RG_IEEE_ADDR_3, *extended_address++ );
     cc2:	87 01       	movw	r16, r14
     cc4:	0f 5f       	subi	r16, 0xFF	; 255
     cc6:	1f 4f       	sbci	r17, 0xFF	; 255
     cc8:	87 e2       	ldi	r24, 0x27	; 39
     cca:	f5 01       	movw	r30, r10
     ccc:	61 81       	ldd	r22, Z+1	; 0x01
     cce:	0e 94 cf 08 	call	0x119e	; 0x119e <hal_register_write>
    hal_register_write( RG_IEEE_ADDR_2, *extended_address++ );
     cd2:	86 e2       	ldi	r24, 0x26	; 38
     cd4:	f7 01       	movw	r30, r14
     cd6:	61 81       	ldd	r22, Z+1	; 0x01
     cd8:	0e 94 cf 08 	call	0x119e	; 0x119e <hal_register_write>
    hal_register_write( RG_IEEE_ADDR_1, *extended_address++ );
     cdc:	85 e2       	ldi	r24, 0x25	; 37
     cde:	f8 01       	movw	r30, r16
     ce0:	61 81       	ldd	r22, Z+1	; 0x01
     ce2:	0e 94 cf 08 	call	0x119e	; 0x119e <hal_register_write>
    hal_register_write( RG_IEEE_ADDR_0, *extended_address++ );
     ce6:	84 e2       	ldi	r24, 0x24	; 36
    hal_register_write( RG_IEEE_ADDR_7, *extended_address++ );
    hal_register_write( RG_IEEE_ADDR_6, *extended_address++ );
    hal_register_write( RG_IEEE_ADDR_5, *extended_address++ );
    hal_register_write( RG_IEEE_ADDR_4, *extended_address++ );
    hal_register_write( RG_IEEE_ADDR_3, *extended_address++ );
    hal_register_write( RG_IEEE_ADDR_2, *extended_address++ );
     ce8:	0f 5f       	subi	r16, 0xFF	; 255
     cea:	1f 4f       	sbci	r17, 0xFF	; 255
    hal_register_write( RG_IEEE_ADDR_1, *extended_address++ );
    hal_register_write( RG_IEEE_ADDR_0, *extended_address++ );
     cec:	f8 01       	movw	r30, r16
     cee:	61 81       	ldd	r22, Z+1	; 0x01
     cf0:	0e 94 cf 08 	call	0x119e	; 0x119e <hal_register_write>
}
     cf4:	1f 91       	pop	r17
     cf6:	0f 91       	pop	r16
     cf8:	ff 90       	pop	r15
     cfa:	ef 90       	pop	r14
     cfc:	df 90       	pop	r13
     cfe:	cf 90       	pop	r12
     d00:	bf 90       	pop	r11
     d02:	af 90       	pop	r10
     d04:	08 95       	ret

00000d06 <tat_set_short_address>:
 *
 *  \param  new_short_address Short address to be used by the address filter. 
 *
 *  \ingroup tat
 */
void tat_set_short_address( uint16_t new_short_address ){
     d06:	1f 93       	push	r17
     d08:	68 2f       	mov	r22, r24
     d0a:	19 2f       	mov	r17, r25
    
    uint8_t short_address_byte = new_short_address & 0xFF; // Extract short_address_7_0.
    hal_register_write( RG_SHORT_ADDR_0, short_address_byte );
     d0c:	80 e2       	ldi	r24, 0x20	; 32
     d0e:	0e 94 cf 08 	call	0x119e	; 0x119e <hal_register_write>
    
    short_address_byte = (new_short_address >> 8*1) & 0xFF; // Extract short_address_15_8.
    hal_register_write( RG_SHORT_ADDR_1, short_address_byte );
     d12:	81 e2       	ldi	r24, 0x21	; 33
     d14:	61 2f       	mov	r22, r17
     d16:	0e 94 cf 08 	call	0x119e	; 0x119e <hal_register_write>
}
     d1a:	1f 91       	pop	r17
     d1c:	08 95       	ret

00000d1e <tat_set_pan_id>:
 *
 *  \param  new_pan_id Desired PANID. Can be any value from 0x0000 to 0xFFFF 
 *
 *  \ingroup tat
 */
void tat_set_pan_id( uint16_t new_pan_id ){
     d1e:	1f 93       	push	r17
     d20:	68 2f       	mov	r22, r24
     d22:	19 2f       	mov	r17, r25
    
    uint8_t pan_byte = new_pan_id & 0xFF; // Extract new_pan_id_7_0.
    hal_register_write( RG_PAN_ID_0, pan_byte );
     d24:	82 e2       	ldi	r24, 0x22	; 34
     d26:	0e 94 cf 08 	call	0x119e	; 0x119e <hal_register_write>
    
    pan_byte = (new_pan_id >> 8*1) & 0xFF;  // Extract new_pan_id_15_8.
    hal_register_write( RG_PAN_ID_1, pan_byte );    
     d2a:	83 e2       	ldi	r24, 0x23	; 35
     d2c:	61 2f       	mov	r22, r17
     d2e:	0e 94 cf 08 	call	0x119e	; 0x119e <hal_register_write>
}
     d32:	1f 91       	pop	r17
     d34:	08 95       	ret

00000d36 <tat_get_extended_address>:
 *
 *  \return Extended Address, any 64-bit value.
 *
 *  \ingroup tat
 */
__x void tat_get_extended_address( uint8_t *extended_address ){
     d36:	ef 92       	push	r14
     d38:	ff 92       	push	r15
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	7c 01       	movw	r14, r24
    
    *extended_address++ = hal_register_read( RG_IEEE_ADDR_7 ); // Read ieee_address_63_56.
     d40:	8b e2       	ldi	r24, 0x2B	; 43
     d42:	0e 94 b5 08 	call	0x116a	; 0x116a <hal_register_read>
     d46:	f7 01       	movw	r30, r14
     d48:	81 93       	st	Z+, r24
     d4a:	8f 01       	movw	r16, r30
    *extended_address++ = hal_register_read( RG_IEEE_ADDR_6 ); // Read ieee_address_55_48.
     d4c:	8a e2       	ldi	r24, 0x2A	; 42
     d4e:	0e 94 b5 08 	call	0x116a	; 0x116a <hal_register_read>
     d52:	f7 01       	movw	r30, r14
     d54:	81 83       	std	Z+1, r24	; 0x01
     d56:	78 01       	movw	r14, r16
     d58:	08 94       	sec
     d5a:	e1 1c       	adc	r14, r1
     d5c:	f1 1c       	adc	r15, r1
    *extended_address++ = hal_register_read( RG_IEEE_ADDR_5 ); // Read ieee_address_47_40.
     d5e:	89 e2       	ldi	r24, 0x29	; 41
     d60:	0e 94 b5 08 	call	0x116a	; 0x116a <hal_register_read>
     d64:	f8 01       	movw	r30, r16
     d66:	81 83       	std	Z+1, r24	; 0x01
     d68:	87 01       	movw	r16, r14
     d6a:	0f 5f       	subi	r16, 0xFF	; 255
     d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    *extended_address++ = hal_register_read( RG_IEEE_ADDR_4 ); // Read ieee_address_39_32.
     d6e:	88 e2       	ldi	r24, 0x28	; 40
     d70:	0e 94 b5 08 	call	0x116a	; 0x116a <hal_register_read>
     d74:	f7 01       	movw	r30, r14
     d76:	81 83       	std	Z+1, r24	; 0x01
     d78:	78 01       	movw	r14, r16
     d7a:	08 94       	sec
     d7c:	e1 1c       	adc	r14, r1
     d7e:	f1 1c       	adc	r15, r1
    *extended_address++ = hal_register_read( RG_IEEE_ADDR_3 ); // Read ieee_address_31_24.
     d80:	87 e2       	ldi	r24, 0x27	; 39
     d82:	0e 94 b5 08 	call	0x116a	; 0x116a <hal_register_read>
     d86:	f8 01       	movw	r30, r16
     d88:	81 83       	std	Z+1, r24	; 0x01
     d8a:	87 01       	movw	r16, r14
     d8c:	0f 5f       	subi	r16, 0xFF	; 255
     d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    *extended_address++ = hal_register_read( RG_IEEE_ADDR_2 ); // Read ieee_address_23_16.
     d90:	86 e2       	ldi	r24, 0x26	; 38
     d92:	0e 94 b5 08 	call	0x116a	; 0x116a <hal_register_read>
     d96:	f7 01       	movw	r30, r14
     d98:	81 83       	std	Z+1, r24	; 0x01
    *extended_address++ = hal_register_read( RG_IEEE_ADDR_1 ); // Read ieee_address_15_8.
     d9a:	85 e2       	ldi	r24, 0x25	; 37
     d9c:	0e 94 b5 08 	call	0x116a	; 0x116a <hal_register_read>
     da0:	f8 01       	movw	r30, r16
     da2:	81 83       	std	Z+1, r24	; 0x01
    *extended_address   = hal_register_read( RG_IEEE_ADDR_0 ); // Read ieee_address_7_0.
     da4:	84 e2       	ldi	r24, 0x24	; 36
     da6:	0e 94 b5 08 	call	0x116a	; 0x116a <hal_register_read>
    *extended_address++ = hal_register_read( RG_IEEE_ADDR_7 ); // Read ieee_address_63_56.
    *extended_address++ = hal_register_read( RG_IEEE_ADDR_6 ); // Read ieee_address_55_48.
    *extended_address++ = hal_register_read( RG_IEEE_ADDR_5 ); // Read ieee_address_47_40.
    *extended_address++ = hal_register_read( RG_IEEE_ADDR_4 ); // Read ieee_address_39_32.
    *extended_address++ = hal_register_read( RG_IEEE_ADDR_3 ); // Read ieee_address_31_24.
    *extended_address++ = hal_register_read( RG_IEEE_ADDR_2 ); // Read ieee_address_23_16.
     daa:	0f 5f       	subi	r16, 0xFF	; 255
     dac:	1f 4f       	sbci	r17, 0xFF	; 255
    *extended_address++ = hal_register_read( RG_IEEE_ADDR_1 ); // Read ieee_address_15_8.
    *extended_address   = hal_register_read( RG_IEEE_ADDR_0 ); // Read ieee_address_7_0.
     dae:	f8 01       	movw	r30, r16
     db0:	81 83       	std	Z+1, r24	; 0x01
}
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	ff 90       	pop	r15
     db8:	ef 90       	pop	r14
     dba:	08 95       	ret

00000dbc <tat_get_short_address>:
 *
 *  \retval Any value from 0x0000 to 0xFFFF
 *
 *  \ingroup tat
 */
uint16_t tat_get_short_address( void ){
     dbc:	1f 93       	push	r17

    uint8_t short_address_15_8 = hal_register_read( RG_SHORT_ADDR_1 ); // Read short_address_15_8.
     dbe:	81 e2       	ldi	r24, 0x21	; 33
     dc0:	0e 94 b5 08 	call	0x116a	; 0x116a <hal_register_read>
     dc4:	18 2f       	mov	r17, r24
    uint8_t short_address_7_0  = hal_register_read( RG_SHORT_ADDR_1 ); // Read short_address_7_0.
     dc6:	81 e2       	ldi	r24, 0x21	; 33
     dc8:	0e 94 b5 08 	call	0x116a	; 0x116a <hal_register_read>
     dcc:	51 2f       	mov	r21, r17
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	24 2b       	or	r18, r20
     dd6:	35 2b       	or	r19, r21
    
    uint16_t short_address = ((uint16_t)(short_address_15_8 << 8)) | short_address_7_0;
    
    return short_address;
}
     dd8:	c9 01       	movw	r24, r18
     dda:	1f 91       	pop	r17
     ddc:	08 95       	ret

00000dde <tat_get_pan_id>:
 *
 *  \retval Any value from 0 to 0xFFFF.
 *
 *  \ingroup tat
 */
uint16_t tat_get_pan_id( void ){
     dde:	1f 93       	push	r17
    
    uint8_t pan_id_15_8 = hal_register_read( RG_PAN_ID_1 ); // Read pan_id_15_8.
     de0:	83 e2       	ldi	r24, 0x23	; 35
     de2:	0e 94 b5 08 	call	0x116a	; 0x116a <hal_register_read>
     de6:	18 2f       	mov	r17, r24
    uint8_t pan_id_7_0 = hal_register_read( RG_PAN_ID_0 ); // Read pan_id_7_0.
     de8:	82 e2       	ldi	r24, 0x22	; 34
     dea:	0e 94 b5 08 	call	0x116a	; 0x116a <hal_register_read>
     dee:	51 2f       	mov	r21, r17
     df0:	40 e0       	ldi	r20, 0x00	; 0
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	24 2b       	or	r18, r20
     df8:	35 2b       	or	r19, r21
    
    uint16_t pan_id = ((uint16_t)(pan_id_15_8 << 8)) | pan_id_7_0;
    
    return pan_id;
}
     dfa:	c9 01       	movw	r24, r18
     dfc:	1f 91       	pop	r17
     dfe:	08 95       	ret

00000e00 <tat_do_cca>:
 *                                 transition between two states.
 *   
 *  \ingroup tat
 */
uint8_t tat_get_trx_state( void ){
    return hal_subregister_read( SR_TRX_STATUS );
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	6f e1       	ldi	r22, 0x1F	; 31
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
 *  \ingroup tat
 */
tat_status_t tat_do_cca( void ){

    /*Check state. CCA measurement only possible form PLL_ON state.*/
    if (tat_get_trx_state( ) != PLL_ON) { return TAT_WRONG_STATE; }
     e0a:	89 30       	cpi	r24, 0x09	; 9
     e0c:	11 f0       	breq	.+4      	; 0xe12 <tat_do_cca+0x12>
     e0e:	84 e4       	ldi	r24, 0x44	; 68
     e10:	08 95       	ret
    
    /*Ensure that it is possible to enter RX_ON*/
    if (tat_set_trx_state( RX_ON ) != TAT_SUCCESS) { return TAT_TIMED_OUT; }
     e12:	86 e0       	ldi	r24, 0x06	; 6
     e14:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <tat_set_trx_state>
     e18:	80 34       	cpi	r24, 0x40	; 64
     e1a:	a9 f4       	brne	.+42     	; 0xe46 <tat_do_cca+0x46>
            
    //The CCA is initiated by writing 1 to the CCA_REQUEST subregister.
    hal_subregister_write( SR_CCA_REQUEST, TAT_START_CCA );
     e1c:	88 e0       	ldi	r24, 0x08	; 8
     e1e:	60 e8       	ldi	r22, 0x80	; 128
     e20:	47 e0       	ldi	r20, 0x07	; 7
     e22:	21 e0       	ldi	r18, 0x01	; 1
     e24:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
     e28:	82 e0       	ldi	r24, 0x02	; 2
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <tat_do_cca+0x2c>
            
    //The CCA is measured over 128 us + 12 us computation time.
    delay_us( TIME_CCA );
    
    uint8_t status = hal_register_read( RG_TRX_STATUS ); //Read cca status.
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	0e 94 b5 08 	call	0x116a	; 0x116a <hal_register_read>
    tat_status_t cca_status = TAT_CCA_BUSY; //Return variable.
    
    //Check if the algorithm finished -> CCA_DONE == 1.
    if ((status & TAT_CCA_DONE_MASK) != TAT_CCA_DONE_MASK) {
     e36:	87 ff       	sbrs	r24, 7
     e38:	06 c0       	rjmp	.+12     	; 0xe46 <tat_do_cca+0x46>
        cca_status = TAT_TIMED_OUT;
    } else {
                
        //CCA done, but check if the channel is busy or not.
        if ((status & TAT_CCA_IDLE_MASK) != TAT_CCA_IDLE_MASK) {
     e3a:	86 fd       	sbrc	r24, 6
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <tat_do_cca+0x42>
     e3e:	88 e4       	ldi	r24, 0x48	; 72
     e40:	08 95       	ret
     e42:	87 e4       	ldi	r24, 0x47	; 71
     e44:	08 95       	ret
     e46:	83 e4       	ldi	r24, 0x43	; 67
            cca_status = TAT_CCA_IDLE;
        } // end: if ((status & TAT_CCA_IDLE_MASK) ...
    } // end: if ((status & TAT_CCA_DONE_MASK) ...
    
    return cca_status;
}
     e48:	08 95       	ret

00000e4a <tat_do_ed_scan>:
 *  \retval TAT_SUCCESS The detection was successful.
 *  \retval TAT_WRONG_STATE The energy detection can only be done if the radio
 *                          transceiver's state is RX_ON or BUSY_RX.
 *  \ingroup tat
 */
tat_status_t tat_do_ed_scan( uint8_t *ed_level ){
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	ec 01       	movw	r28, r24
 *                                 transition between two states.
 *   
 *  \ingroup tat
 */
uint8_t tat_get_trx_state( void ){
    return hal_subregister_read( SR_TRX_STATUS );
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	6f e1       	ldi	r22, 0x1F	; 31
     e54:	40 e0       	ldi	r20, 0x00	; 0
     e56:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
tat_status_t tat_do_ed_scan( uint8_t *ed_level ){

    uint8_t current_state = tat_get_trx_state( );

    /*Check state. Only possible to do ed measurement from RX_ON or BUSY_RX.*/
    if ((current_state != RX_ON ) && (current_state != BUSY_RX)) {
     e5a:	86 30       	cpi	r24, 0x06	; 6
     e5c:	21 f0       	breq	.+8      	; 0xe66 <tat_do_ed_scan+0x1c>
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	11 f0       	breq	.+4      	; 0xe66 <tat_do_ed_scan+0x1c>
     e62:	84 e4       	ldi	r24, 0x44	; 68
     e64:	0d c0       	rjmp	.+26     	; 0xe80 <tat_do_ed_scan+0x36>
        return TAT_WRONG_STATE;
    }
    
    /*Do ED measurement.*/    
    //Initiate the measurement by writing to the PHY_ED_LEVEL register.
    hal_register_write( RG_PHY_ED_LEVEL, 0 );
     e66:	87 e0       	ldi	r24, 0x07	; 7
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	0e 94 cf 08 	call	0x119e	; 0x119e <hal_register_write>
     e6e:	82 e0       	ldi	r24, 0x02	; 2
     e70:	91 e0       	ldi	r25, 0x01	; 1
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <tat_do_ed_scan+0x28>
    delay_us( TIME_ED_MEASUREMENT ); //Wait 128 us + 12 us computation time.
    *ed_level = hal_register_read( RG_PHY_ED_LEVEL ); //Write ED level to pointer.
     e76:	87 e0       	ldi	r24, 0x07	; 7
     e78:	0e 94 b5 08 	call	0x116a	; 0x116a <hal_register_read>
     e7c:	88 83       	st	Y, r24
     e7e:	80 e4       	ldi	r24, 0x40	; 64

    return TAT_SUCCESS;
}
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	08 95       	ret

00000e86 <tat_calibrate_pll>:
 *                                 transition between two states.
 *   
 *  \ingroup tat
 */
uint8_t tat_get_trx_state( void ){
    return hal_subregister_read( SR_TRX_STATUS );
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	6f e1       	ldi	r22, 0x1F	; 31
     e8a:	40 e0       	ldi	r20, 0x00	; 0
     e8c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
 *  \ingroup tat
 */
tat_status_t tat_calibrate_pll( void ){
    
    /*Check current state. Only possible to calibrate PLL from PLL_ON state*/
    if (tat_get_trx_state( ) != PLL_ON) { return TAT_WRONG_STATE; }
     e90:	89 30       	cpi	r24, 0x09	; 9
     e92:	11 f0       	breq	.+4      	; 0xe98 <tat_calibrate_pll+0x12>
     e94:	84 e4       	ldi	r24, 0x44	; 68
     e96:	08 95       	ret
    
    //Initiate the DCU and CF calibration loops.
    hal_subregister_write( SR_PLL_DCU_START, 1 );
     e98:	8b e1       	ldi	r24, 0x1B	; 27
     e9a:	60 e8       	ldi	r22, 0x80	; 128
     e9c:	47 e0       	ldi	r20, 0x07	; 7
     e9e:	21 e0       	ldi	r18, 0x01	; 1
     ea0:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
    hal_subregister_write( SR_PLL_CF_START, 1 );
     ea4:	8a e1       	ldi	r24, 0x1A	; 26
     ea6:	60 e8       	ldi	r22, 0x80	; 128
     ea8:	47 e0       	ldi	r20, 0x07	; 7
     eaa:	21 e0       	ldi	r18, 0x01	; 1
     eac:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
        
    //Wait maximum 150 us for the PLL to lock.
    hal_clear_pll_lock_flag( );
     eb0:	0e 94 a6 08 	call	0x114c	; 0x114c <hal_clear_pll_lock_flag>
     eb4:	84 e1       	ldi	r24, 0x14	; 20
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	f1 f7       	brne	.-4      	; 0xeb8 <tat_calibrate_pll+0x32>
    delay_us( TIME_PLL_LOCK );
    
    tat_status_t pll_calibration_status = TAT_TIMED_OUT;
    
    if (hal_get_pll_lock_flag( ) > 0) {
     ebc:	0e 94 a3 08 	call	0x1146	; 0x1146 <hal_get_pll_lock_flag>
     ec0:	88 23       	and	r24, r24
     ec2:	81 f0       	breq	.+32     	; 0xee4 <tat_calibrate_pll+0x5e>
    
        if (hal_subregister_read( SR_PLL_DCU_START ) == PLL_DCU_CALIBRATION_DONE) {
     ec4:	8b e1       	ldi	r24, 0x1B	; 27
     ec6:	60 e8       	ldi	r22, 0x80	; 128
     ec8:	47 e0       	ldi	r20, 0x07	; 7
     eca:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
     ece:	88 23       	and	r24, r24
     ed0:	49 f4       	brne	.+18     	; 0xee4 <tat_calibrate_pll+0x5e>
        
            if (hal_subregister_read( SR_PLL_CF_START ) == PLL_CF_CALIBRATION_DONE) {
     ed2:	8a e1       	ldi	r24, 0x1A	; 26
     ed4:	60 e8       	ldi	r22, 0x80	; 128
     ed6:	47 e0       	ldi	r20, 0x07	; 7
     ed8:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
     edc:	88 23       	and	r24, r24
     ede:	11 f4       	brne	.+4      	; 0xee4 <tat_calibrate_pll+0x5e>
     ee0:	80 e4       	ldi	r24, 0x40	; 64
     ee2:	08 95       	ret
     ee4:	83 e4       	ldi	r24, 0x43	; 67
            } // end: if (hal_subregister_read( SR_PLL_CF_START ) ...
        } // end: if (hal_subregister_read( SR_PLL_DCU_START ) ...
    } // end: if ((hal_get_pll_lock_flag( ) ...
    
    return pll_calibration_status;
}
     ee6:	08 95       	ret

00000ee8 <tat_init>:
 *  \retval TAT_TIMED_OUT   The radio transceiver was not able to initialize and 
 *                          enter TRX_OFF state within the specified time.
 *
 *  \ingroup tat
 */
tat_status_t tat_init( void ){
     ee8:	0f 93       	push	r16
     eea:	1f 93       	push	r17
     eec:	0c ea       	ldi	r16, 0xAC	; 172
     eee:	13 e0       	ldi	r17, 0x03	; 3
     ef0:	c8 01       	movw	r24, r16
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <tat_init+0xa>
    tat_status_t init_status = TAT_SUCCESS;
    
    delay_us( TIME_TO_ENTER_P_ON );
        
    //Initialize Hardware Abstraction Layer.
    hal_init( );
     ef6:	0e 94 c8 07 	call	0xf90	; 0xf90 <hal_init>
    
    tat_reset_trx( ); //Do HW reset of radio transeiver.
     efa:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <tat_reset_trx>
    
    //Force transition to TRX_OFF.
    hal_subregister_write( SR_TRX_CMD, CMD_FORCE_TRX_OFF );
     efe:	82 e0       	ldi	r24, 0x02	; 2
     f00:	6f e1       	ldi	r22, 0x1F	; 31
     f02:	40 e0       	ldi	r20, 0x00	; 0
     f04:	23 e0       	ldi	r18, 0x03	; 3
     f06:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <hal_subregister_write>
     f0a:	c8 01       	movw	r24, r16
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	f1 f7       	brne	.-4      	; 0xf0c <tat_init+0x24>
 *                                 transition between two states.
 *   
 *  \ingroup tat
 */
uint8_t tat_get_trx_state( void ){
    return hal_subregister_read( SR_TRX_STATUS );
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	6f e1       	ldi	r22, 0x1F	; 31
     f14:	40 e0       	ldi	r20, 0x00	; 0
     f16:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <hal_subregister_read>
    
    //Force transition to TRX_OFF.
    hal_subregister_write( SR_TRX_CMD, CMD_FORCE_TRX_OFF );
    delay_us( TIME_P_ON_TO_TRX_OFF ); //Wait for the transition to be complete.
    
    if (tat_get_trx_state( ) != TRX_OFF) {
     f1a:	88 30       	cpi	r24, 0x08	; 8
     f1c:	11 f0       	breq	.+4      	; 0xf22 <tat_init+0x3a>
     f1e:	83 e4       	ldi	r24, 0x43	; 67
     f20:	11 c0       	rjmp	.+34     	; 0xf44 <tat_init+0x5c>
        init_status = TAT_TIMED_OUT;    
    } else {
    
        //Read Version Number
        uint8_t version_number = hal_register_read( RG_VERSION_NUM );
     f22:	8d e1       	ldi	r24, 0x1D	; 29
     f24:	0e 94 b5 08 	call	0x116a	; 0x116a <hal_register_read>
        
        if (version_number != AT86RF231_VERSION_NUM) {
     f28:	82 30       	cpi	r24, 0x02	; 2
     f2a:	59 f4       	brne	.+22     	; 0xf42 <tat_init+0x5a>
            init_status = TAT_UNSUPPORTED_DEVICE;
        } else {
        
            if (hal_register_read( RG_MAN_ID_0 ) != SUPPORTED_MANUFACTURER_ID) {
     f2c:	8e e1       	ldi	r24, 0x1E	; 30
     f2e:	0e 94 b5 08 	call	0x116a	; 0x116a <hal_register_read>
     f32:	8f 31       	cpi	r24, 0x1F	; 31
     f34:	31 f4       	brne	.+12     	; 0xf42 <tat_init+0x5a>
                init_status = TAT_UNSUPPORTED_DEVICE;
            } else {
                hal_register_write( RG_IRQ_MASK, RF231_SUPPORTED_INTERRUPT_MASK );
     f36:	8e e0       	ldi	r24, 0x0E	; 14
     f38:	6f ef       	ldi	r22, 0xFF	; 255
     f3a:	0e 94 cf 08 	call	0x119e	; 0x119e <hal_register_write>
     f3e:	80 e4       	ldi	r24, 0x40	; 64
     f40:	01 c0       	rjmp	.+2      	; 0xf44 <tat_init+0x5c>
     f42:	81 e4       	ldi	r24, 0x41	; 65
            } // end: if (hal_register_read( RG_MAN_ID_0 ) != ...
        } // end: if ((version_number != RF231_REVA ) ...
    } // end: if (tat_get_trx_state( ) ...
    
    return init_status;
}
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	08 95       	ret

00000f4a <hal_reset_flags>:
/*! \brief  This function reset the interrupt flags and interrupt event handlers 
 *          (Callbacks) to their default value.
 *
 *  \ingroup hal_avr_api
 */
void hal_reset_flags( void ){
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
    
    AVR_ENTER_CRITICAL_REGION( );
     f54:	8f b7       	in	r24, 0x3f	; 63
     f56:	89 83       	std	Y+1, r24	; 0x01
    
    //Reset Flags.
    hal_bat_low_flag     = 0;
     f58:	10 92 f9 05 	sts	0x05F9, r1
    hal_trx_ur_flag      = 0;
     f5c:	10 92 fa 05 	sts	0x05FA, r1
    hal_trx_end_flag     = 0;
     f60:	10 92 fb 05 	sts	0x05FB, r1
    hal_rx_start_flag    = 0;  
     f64:	10 92 fc 05 	sts	0x05FC, r1
    hal_unknown_isr_flag = 0;
     f68:	10 92 fd 05 	sts	0x05FD, r1
    hal_pll_unlock_flag  = 0;
     f6c:	10 92 fe 05 	sts	0x05FE, r1
    hal_pll_lock_flag    = 0;
     f70:	10 92 ff 05 	sts	0x05FF, r1
    
    //Reset Associated Event Handlers.
    rx_start_callback = NULL;
     f74:	10 92 01 06 	sts	0x0601, r1
     f78:	10 92 00 06 	sts	0x0600, r1
    trx_end_callback  = NULL;
     f7c:	10 92 03 06 	sts	0x0603, r1
     f80:	10 92 02 06 	sts	0x0602, r1
    
    AVR_LEAVE_CRITICAL_REGION( )
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	8f bf       	out	0x3f, r24	; 63
}
     f88:	0f 90       	pop	r0
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <hal_init>:
 *  \ingroup hal_avr_api
 */
void hal_init( void ){
    
    /*Reset variables used in file.*/
    hal_system_time = 0;
     f90:	10 92 f8 05 	sts	0x05F8, r1
     f94:	10 92 f7 05 	sts	0x05F7, r1
    hal_reset_flags( );
     f98:	0e 94 a5 07 	call	0xf4a	; 0xf4a <hal_reset_flags>
    
    /*IO Specific Initialization.*/
    DDR_SLP_TR |= (1 << SLP_TR); //Enable SLP_TR as output.
     f9c:	24 9a       	sbi	0x04, 4	; 4
    DDR_RST    |= (1 << RST);    //Enable RST as output.
     f9e:	25 9a       	sbi	0x04, 5	; 4
 	HAL_DDR_DATA_LED |= (1 << DATA_LED);
     fa0:	80 9a       	sbi	0x10, 0	; 16
	HAL_DDR_NET_LED |= (1<< NET_LED);
     fa2:	81 9a       	sbi	0x10, 1	; 16
   
    /*SPI Specific Initialization.*/    
    //Set SS, CLK and MOSI as output.
    HAL_DDR_SPI  |= (1 << HAL_DD_SS) | (1 << HAL_DD_SCK) | (1 << HAL_DD_MOSI);
     fa4:	84 b1       	in	r24, 0x04	; 4
     fa6:	87 60       	ori	r24, 0x07	; 7
     fa8:	84 b9       	out	0x04, r24	; 4
    HAL_PORT_SPI |= (1 << HAL_DD_SS) | (1 << HAL_DD_SCK); //Set SS and CLK high
     faa:	85 b1       	in	r24, 0x05	; 5
     fac:	83 60       	ori	r24, 0x03	; 3
     fae:	85 b9       	out	0x05, r24	; 5
    SPCR         = (1 << SPE) | (1 << MSTR); //Enable SPI module and master operation.
     fb0:	80 e5       	ldi	r24, 0x50	; 80
     fb2:	8c bd       	out	0x2c, r24	; 44
    SPSR         = (1 << SPI2X); //Enable doubled SPI speed in master mode.
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	8d bd       	out	0x2d, r24	; 45

    /*TIMER1 Specific Initialization.*/    
    TCCR1B = HAL_TCCR1B_CONFIG;       //Set clock prescaler  
     fb8:	83 e4       	ldi	r24, 0x43	; 67
     fba:	80 93 81 00 	sts	0x0081, r24
    TIFR1 |= (1 << ICF1);             //Clear Input Capture Flag.
     fbe:	b5 9a       	sbi	0x16, 5	; 22
    HAL_ENABLE_OVERFLOW_INTERRUPT( ); //Enable Timer1 overflow interrupt. 
     fc0:	ef e6       	ldi	r30, 0x6F	; 111
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	81 60       	ori	r24, 0x01	; 1
     fc8:	80 83       	st	Z, r24
    hal_enable_trx_interrupt( );    //Enable interrupts from the radio transceiver.
     fca:	80 81       	ld	r24, Z
     fcc:	80 62       	ori	r24, 0x20	; 32
     fce:	80 83       	st	Z, r24
}
     fd0:	08 95       	ret

00000fd2 <hal_get_bat_low_flag>:
 *  for new event occurances. 
 *
 *  \ingroup hal_avr_api
 */
uint8_t hal_get_bat_low_flag( void ){
    return hal_bat_low_flag;
     fd2:	80 91 f9 05 	lds	r24, 0x05F9
}
     fd6:	08 95       	ret

00000fd8 <hal_clear_bat_low_flag>:

/*! \brief  This function clears the BAT_LOW flag.
 *
 *  \ingroup hal_avr_api
 */
void hal_clear_bat_low_flag( void ){
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	0f 92       	push	r0
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
    
    AVR_ENTER_CRITICAL_REGION( );
     fe2:	8f b7       	in	r24, 0x3f	; 63
     fe4:	89 83       	std	Y+1, r24	; 0x01
    hal_bat_low_flag = 0;
     fe6:	10 92 f9 05 	sts	0x05F9, r1
    AVR_LEAVE_CRITICAL_REGION( );
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	8f bf       	out	0x3f, r24	; 63
}
     fee:	0f 90       	pop	r0
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	08 95       	ret

00000ff6 <hal_get_trx_ur_flag>:
 *  for new event occurances. 
 *
 *  \ingroup hal_avr_api
 */
uint8_t hal_get_trx_ur_flag( void ){
    return hal_trx_ur_flag;
     ff6:	80 91 fa 05 	lds	r24, 0x05FA
}
     ffa:	08 95       	ret

00000ffc <hal_clear_trx_ur_flag>:

/*! \brief  This function clears the TRX_UR flag.
 *
 *  \ingroup hal_avr_api
 */
void hal_clear_trx_ur_flag( void ){
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	0f 92       	push	r0
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    
    AVR_ENTER_CRITICAL_REGION( );
    1006:	8f b7       	in	r24, 0x3f	; 63
    1008:	89 83       	std	Y+1, r24	; 0x01
    hal_trx_ur_flag = 0;
    100a:	10 92 fa 05 	sts	0x05FA, r1
    AVR_LEAVE_CRITICAL_REGION( );
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	8f bf       	out	0x3f, r24	; 63
}
    1012:	0f 90       	pop	r0
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <hal_get_trx_end_flag>:
 *  for new event occurances. 
 *
 *  \ingroup hal_avr_api
 */
uint8_t hal_get_trx_end_flag( void ){
    return hal_trx_end_flag;
    101a:	80 91 fb 05 	lds	r24, 0x05FB
}
    101e:	08 95       	ret

00001020 <hal_clear_trx_end_flag>:

/*! \brief  This function clears the TRX_END flag.
 *
 *  \ingroup hal_avr_api
 */
void hal_clear_trx_end_flag( void ){
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	0f 92       	push	r0
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    
    AVR_ENTER_CRITICAL_REGION( );
    102a:	8f b7       	in	r24, 0x3f	; 63
    102c:	89 83       	std	Y+1, r24	; 0x01
    hal_trx_end_flag = 0;
    102e:	10 92 fb 05 	sts	0x05FB, r1
    AVR_LEAVE_CRITICAL_REGION( );
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	8f bf       	out	0x3f, r24	; 63
}
    1036:	0f 90       	pop	r0
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <hal_get_trx_end_event_handler>:
 *
 *  \ingroup hal_avr_api
 */
hal_trx_end_isr_event_handler_t hal_get_trx_end_event_handler( void ){
    return trx_end_callback;
}
    103e:	80 91 02 06 	lds	r24, 0x0602
    1042:	90 91 03 06 	lds	r25, 0x0603
    1046:	08 95       	ret

00001048 <hal_set_trx_end_event_handler>:
/*! \brief  This function is used to set new TRX_END event handler, overriding 
 *          old handler reference.
 *
 *  \ingroup hal_avr_api
 */
void hal_set_trx_end_event_handler( hal_trx_end_isr_event_handler_t trx_end_callback_handle ){
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	0f 92       	push	r0
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    
    AVR_ENTER_CRITICAL_REGION( );
    1052:	2f b7       	in	r18, 0x3f	; 63
    1054:	29 83       	std	Y+1, r18	; 0x01
    trx_end_callback = trx_end_callback_handle;
    1056:	90 93 03 06 	sts	0x0603, r25
    105a:	80 93 02 06 	sts	0x0602, r24
    AVR_LEAVE_CRITICAL_REGION( );
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	8f bf       	out	0x3f, r24	; 63
}
    1062:	0f 90       	pop	r0
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <hal_clear_trx_end_event_handler>:

/*! \brief  Remove event handler reference.
 *
 *  \ingroup hal_avr_api
 */
void hal_clear_trx_end_event_handler( void ){
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	0f 92       	push	r0
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    
    AVR_ENTER_CRITICAL_REGION( );
    1074:	8f b7       	in	r24, 0x3f	; 63
    1076:	89 83       	std	Y+1, r24	; 0x01
    trx_end_callback = NULL;
    1078:	10 92 03 06 	sts	0x0603, r1
    107c:	10 92 02 06 	sts	0x0602, r1
    AVR_LEAVE_CRITICAL_REGION( );
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	8f bf       	out	0x3f, r24	; 63
}
    1084:	0f 90       	pop	r0
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	08 95       	ret

0000108c <hal_get_rx_start_flag>:
 *  for new event occurances. 
 *
 *  \ingroup hal_avr_api
 */
uint8_t hal_get_rx_start_flag( void ){
    return hal_rx_start_flag;
    108c:	80 91 fc 05 	lds	r24, 0x05FC
}
    1090:	08 95       	ret

00001092 <hal_clear_rx_start_flag>:

/*! \brief  This function clears the RX_START flag.
 *
 *  \ingroup hal_avr_api
 */
void hal_clear_rx_start_flag( void ){
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	0f 92       	push	r0
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    
    AVR_ENTER_CRITICAL_REGION( );
    109c:	8f b7       	in	r24, 0x3f	; 63
    109e:	89 83       	std	Y+1, r24	; 0x01
    hal_rx_start_flag = 0;
    10a0:	10 92 fc 05 	sts	0x05FC, r1
    AVR_LEAVE_CRITICAL_REGION( );
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	8f bf       	out	0x3f, r24	; 63
}
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <hal_get_rx_start_event_handler>:
 *  \return Current RX_START event handler registered.
 *  \ingroup hal_avr_api
 */
hal_rx_start_isr_event_handler_t hal_get_rx_start_event_handler( void ){
    return rx_start_callback;    
}
    10b0:	80 91 00 06 	lds	r24, 0x0600
    10b4:	90 91 01 06 	lds	r25, 0x0601
    10b8:	08 95       	ret

000010ba <hal_set_rx_start_event_handler>:
/*! \brief  This function is used to set new RX_START event handler, overriding 
 *          old handler reference.
 *
 *  \ingroup hal_avr_api
 */
void hal_set_rx_start_event_handler( hal_rx_start_isr_event_handler_t rx_start_callback_handle ){
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	0f 92       	push	r0
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    
    AVR_ENTER_CRITICAL_REGION( );
    10c4:	2f b7       	in	r18, 0x3f	; 63
    10c6:	29 83       	std	Y+1, r18	; 0x01
    rx_start_callback = rx_start_callback_handle;
    10c8:	90 93 01 06 	sts	0x0601, r25
    10cc:	80 93 00 06 	sts	0x0600, r24
    AVR_LEAVE_CRITICAL_REGION( );
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	8f bf       	out	0x3f, r24	; 63
}
    10d4:	0f 90       	pop	r0
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <hal_clear_rx_start_event_handler>:

/*! \brief  Remove event handler reference.
 *
 *  \ingroup hal_avr_api
 */
void hal_clear_rx_start_event_handler( void ){
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	0f 92       	push	r0
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    
    AVR_ENTER_CRITICAL_REGION( );
    10e6:	8f b7       	in	r24, 0x3f	; 63
    10e8:	89 83       	std	Y+1, r24	; 0x01
    rx_start_callback = NULL;
    10ea:	10 92 01 06 	sts	0x0601, r1
    10ee:	10 92 00 06 	sts	0x0600, r1
    AVR_LEAVE_CRITICAL_REGION( );
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	8f bf       	out	0x3f, r24	; 63
}
    10f6:	0f 90       	pop	r0
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <hal_get_unknown_isr_flag>:
 *  for new event occurances. 
 *
 *  \ingroup hal_avr_api
 */
uint8_t hal_get_unknown_isr_flag( void ){
    return hal_unknown_isr_flag;
    10fe:	80 91 fd 05 	lds	r24, 0x05FD
}
    1102:	08 95       	ret

00001104 <hal_clear_unknown_isr_flag>:

/*! \brief  This function clears the UNKNOWN_ISR flag.
 *
 *  \ingroup hal_avr_api
 */
void hal_clear_unknown_isr_flag( void ){
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	0f 92       	push	r0
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    
    AVR_ENTER_CRITICAL_REGION( );
    110e:	8f b7       	in	r24, 0x3f	; 63
    1110:	89 83       	std	Y+1, r24	; 0x01
    hal_unknown_isr_flag = 0;
    1112:	10 92 fd 05 	sts	0x05FD, r1
    AVR_LEAVE_CRITICAL_REGION( );
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	8f bf       	out	0x3f, r24	; 63
}
    111a:	0f 90       	pop	r0
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <hal_get_pll_unlock_flag>:
 *  for new event occurances. 
 *
 *  \ingroup hal_avr_api
 */
uint8_t hal_get_pll_unlock_flag( void ){
    return hal_pll_unlock_flag;
    1122:	80 91 fe 05 	lds	r24, 0x05FE
}
    1126:	08 95       	ret

00001128 <hal_clear_pll_unlock_flag>:

/*! \brief  This function clears the PLL_UNLOCK flag.
 *
 *  \ingroup hal_avr_api
 */
void hal_clear_pll_unlock_flag( void ){
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	0f 92       	push	r0
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    
    AVR_ENTER_CRITICAL_REGION( );
    1132:	8f b7       	in	r24, 0x3f	; 63
    1134:	89 83       	std	Y+1, r24	; 0x01
    hal_pll_unlock_flag = 0;
    1136:	10 92 fe 05 	sts	0x05FE, r1
    AVR_LEAVE_CRITICAL_REGION( );
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	8f bf       	out	0x3f, r24	; 63
}
    113e:	0f 90       	pop	r0
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <hal_get_pll_lock_flag>:
 *  for new event occurances. 
 *
 *  \ingroup hal_avr_api
 */
uint8_t hal_get_pll_lock_flag( void ){
    return hal_pll_lock_flag;
    1146:	80 91 ff 05 	lds	r24, 0x05FF
}
    114a:	08 95       	ret

0000114c <hal_clear_pll_lock_flag>:

/*! \brief  This function clears the PLL_LOCK flag.
 *
 *  \ingroup hal_avr_api
 */
void hal_clear_pll_lock_flag( void ){
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	0f 92       	push	r0
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    
    AVR_ENTER_CRITICAL_REGION( );
    1156:	8f b7       	in	r24, 0x3f	; 63
    1158:	89 83       	std	Y+1, r24	; 0x01
    hal_pll_lock_flag = 0;
    115a:	10 92 ff 05 	sts	0x05FF, r1
    AVR_LEAVE_CRITICAL_REGION( );
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	8f bf       	out	0x3f, r24	; 63
}
    1162:	0f 90       	pop	r0
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <hal_register_read>:
 *
 *  \returns The actual value of the read register.
 *
 *  \ingroup hal_avr_api
 */
uint8_t hal_register_read( uint8_t address ){
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	0f 92       	push	r0
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    
    //Add the register read command to the register address.
    address &= HAL_TRX_CMD_RADDRM;
    address |= HAL_TRX_CMD_RR;
    1174:	80 68       	ori	r24, 0x80	; 128
    
    uint8_t register_value = 0;
    
    AVR_ENTER_CRITICAL_REGION( );
    1176:	9f b7       	in	r25, 0x3f	; 63
    1178:	99 83       	std	Y+1, r25	; 0x01
    
    HAL_SS_LOW( ); //Start the SPI transaction by pulling the Slave Select low.
    117a:	28 98       	cbi	0x05, 0	; 5
    
    /*Send Register address and read register content.*/
    SPDR = address;
    117c:	8e bd       	out	0x2e, r24	; 46
    while ((SPSR & (1 << SPIF)) == 0) {;}
    117e:	0d b4       	in	r0, 0x2d	; 45
    1180:	07 fe       	sbrs	r0, 7
    1182:	fd cf       	rjmp	.-6      	; 0x117e <hal_register_read+0x14>
    register_value = SPDR;
    1184:	8e b5       	in	r24, 0x2e	; 46
    
    SPDR = register_value;
    1186:	8e bd       	out	0x2e, r24	; 46
    while ((SPSR & (1 << SPIF)) == 0) {;}
    1188:	0d b4       	in	r0, 0x2d	; 45
    118a:	07 fe       	sbrs	r0, 7
    118c:	fd cf       	rjmp	.-6      	; 0x1188 <hal_register_read+0x1e>
    register_value = SPDR;
    118e:	8e b5       	in	r24, 0x2e	; 46

    HAL_SS_HIGH( ); //End the transaction by pulling the Slave Select High.  
    1190:	28 9a       	sbi	0x05, 0	; 5
    
    AVR_LEAVE_CRITICAL_REGION( );
    1192:	99 81       	ldd	r25, Y+1	; 0x01
    1194:	9f bf       	out	0x3f, r25	; 63
    
    return register_value;
}
    1196:	0f 90       	pop	r0
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <hal_register_write>:
 *  \param  address Address of register to write.
 *  \param  value   Value to write.
 *
 *  \ingroup hal_avr_api
 */
void hal_register_write( uint8_t address, uint8_t value ){
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	0f 92       	push	r0
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
                                       
    //Add the Register Write command to the address.
    address = HAL_TRX_CMD_RW | (HAL_TRX_CMD_RADDRM & address);
    11a8:	80 6c       	ori	r24, 0xC0	; 192
    
    AVR_ENTER_CRITICAL_REGION( );    
    11aa:	9f b7       	in	r25, 0x3f	; 63
    11ac:	99 83       	std	Y+1, r25	; 0x01
    
    HAL_SS_LOW( ); //Start the SPI transaction by pulling the Slave Select low.
    11ae:	28 98       	cbi	0x05, 0	; 5
    
    /*Send Register address and write register content.*/
    SPDR = address;
    11b0:	8e bd       	out	0x2e, r24	; 46
    while ((SPSR & (1 << SPIF)) == 0) {;}
    11b2:	0d b4       	in	r0, 0x2d	; 45
    11b4:	07 fe       	sbrs	r0, 7
    11b6:	fd cf       	rjmp	.-6      	; 0x11b2 <hal_register_write+0x14>
    uint8_t dummy_read = SPDR;
    11b8:	8e b5       	in	r24, 0x2e	; 46
    
    SPDR = value;
    11ba:	6e bd       	out	0x2e, r22	; 46
    while ((SPSR & (1 << SPIF)) == 0) {;}
    11bc:	0d b4       	in	r0, 0x2d	; 45
    11be:	07 fe       	sbrs	r0, 7
    11c0:	fd cf       	rjmp	.-6      	; 0x11bc <hal_register_write+0x1e>
    dummy_read = SPDR;
    11c2:	8e b5       	in	r24, 0x2e	; 46
    
    HAL_SS_HIGH( ); //End the transaction by pulling the Slave Slect High.
    11c4:	28 9a       	sbi	0x05, 0	; 5
    
    AVR_LEAVE_CRITICAL_REGION( );
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	8f bf       	out	0x3f, r24	; 63
}
    11ca:	0f 90       	pop	r0
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <hal_subregister_read>:
 *  \param  position   Bit position of the subregister
 *  \retval Value of the read subregister.
 *
 *  \ingroup hal_avr_api
 */
uint8_t hal_subregister_read( uint8_t address, uint8_t mask, uint8_t position ){
    11d2:	ff 92       	push	r15
    11d4:	0f 93       	push	r16
    11d6:	1f 93       	push	r17
    11d8:	06 2f       	mov	r16, r22
    11da:	f4 2e       	mov	r15, r20
    
    //Read current register value and mask out subregister.
    uint8_t register_value = hal_register_read( address );
    11dc:	0e 94 b5 08 	call	0x116a	; 0x116a <hal_register_read>
    register_value &= mask;
    register_value >>= position; //Align subregister value.
    11e0:	08 23       	and	r16, r24
    11e2:	10 e0       	ldi	r17, 0x00	; 0
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <hal_subregister_read+0x18>
    11e6:	15 95       	asr	r17
    11e8:	07 95       	ror	r16
    11ea:	fa 94       	dec	r15
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <hal_subregister_read+0x14>
    
    return register_value;
}
    11ee:	80 2f       	mov	r24, r16
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	08 95       	ret

000011f8 <hal_subregister_write>:
 *  \param  value  Value to write into the subregister.
 *
 *  \ingroup hal_avr_api
 */
void hal_subregister_write( uint8_t address, uint8_t mask, uint8_t position, 
                            uint8_t value ){
    11f8:	df 92       	push	r13
    11fa:	ef 92       	push	r14
    11fc:	ff 92       	push	r15
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	d8 2e       	mov	r13, r24
    1204:	f6 2e       	mov	r15, r22
    1206:	e4 2e       	mov	r14, r20
    1208:	02 2f       	mov	r16, r18
    
    //Read current register value and mask area outside the subregister.
    uint8_t register_value = hal_register_read( address );
    120a:	0e 94 b5 08 	call	0x116a	; 0x116a <hal_register_read>
    register_value &= ~mask;
    120e:	6f 2d       	mov	r22, r15
    1210:	60 95       	com	r22
    1212:	68 23       	and	r22, r24
    
    //Start preparing the new subregister value. shift in place and mask.
    value <<= position;
    1214:	10 e0       	ldi	r17, 0x00	; 0
    1216:	02 c0       	rjmp	.+4      	; 0x121c <hal_subregister_write+0x24>
    1218:	00 0f       	add	r16, r16
    121a:	11 1f       	adc	r17, r17
    121c:	ea 94       	dec	r14
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <hal_subregister_write+0x20>
    value &= mask;
    1220:	f0 22       	and	r15, r16
    
    value |= register_value; //Set the new subregister value.

    //Write the modified register value.
    hal_register_write( address, value );
    1222:	6f 29       	or	r22, r15
    1224:	8d 2d       	mov	r24, r13
    1226:	0e 94 cf 08 	call	0x119e	; 0x119e <hal_register_write>
}
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	ff 90       	pop	r15
    1230:	ef 90       	pop	r14
    1232:	df 90       	pop	r13
    1234:	08 95       	ret

00001236 <hal_frame_read>:
 *
 *  \param  rx_frame    Pointer to the data structure where the frame is stored.
 *
 *  \ingroup hal_avr_api
 */
__z void hal_frame_read( hal_rx_frame_t *rx_frame ){
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	0f 92       	push	r0
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	fc 01       	movw	r30, r24
    
    AVR_ENTER_CRITICAL_REGION( );
    1242:	8f b7       	in	r24, 0x3f	; 63
    1244:	89 83       	std	Y+1, r24	; 0x01
    
    HAL_SS_LOW( );
    1246:	28 98       	cbi	0x05, 0	; 5
    
    /*Send frame read command.*/
    SPDR = HAL_TRX_CMD_FR;
    1248:	80 e2       	ldi	r24, 0x20	; 32
    124a:	8e bd       	out	0x2e, r24	; 46
    while ((SPSR & (1 << SPIF)) == 0) {;}
    124c:	0d b4       	in	r0, 0x2d	; 45
    124e:	07 fe       	sbrs	r0, 7
    1250:	fd cf       	rjmp	.-6      	; 0x124c <hal_frame_read+0x16>
    uint8_t frame_length = SPDR;
    1252:	8e b5       	in	r24, 0x2e	; 46
    
    /*Read frame length.*/    
    SPDR = frame_length;
    1254:	8e bd       	out	0x2e, r24	; 46
    while ((SPSR & (1 << SPIF)) == 0) {;}
    1256:	0d b4       	in	r0, 0x2d	; 45
    1258:	07 fe       	sbrs	r0, 7
    125a:	fd cf       	rjmp	.-6      	; 0x1256 <hal_frame_read+0x20>
    frame_length = SPDR;
    125c:	9e b5       	in	r25, 0x2e	; 46
    
    /*Check for correct frame length.*/
    if ((frame_length >= HAL_MIN_FRAME_LENGTH) && (frame_length <= HAL_MAX_FRAME_LENGTH)) {
    125e:	89 2f       	mov	r24, r25
    1260:	83 50       	subi	r24, 0x03	; 3
    1262:	8d 37       	cpi	r24, 0x7D	; 125
    1264:	60 f5       	brcc	.+88     	; 0x12be <hal_frame_read+0x88>
        
        uint16_t crc = 0;
        uint8_t *rx_data = (rx_frame->data);
        
        rx_frame->length = frame_length; //Store frame length.
    1266:	90 83       	st	Z, r25
        
        /*Upload frame buffer to data pointer. Calculate CRC.*/
        SPDR = frame_length;
    1268:	9e bd       	out	0x2e, r25	; 46
        while ((SPSR & (1 << SPIF)) == 0) {;}
    126a:	0d b4       	in	r0, 0x2d	; 45
    126c:	07 fe       	sbrs	r0, 7
    126e:	fd cf       	rjmp	.-6      	; 0x126a <hal_frame_read+0x34>
    
    /*Check for correct frame length.*/
    if ((frame_length >= HAL_MIN_FRAME_LENGTH) && (frame_length <= HAL_MAX_FRAME_LENGTH)) {
        
        uint16_t crc = 0;
        uint8_t *rx_data = (rx_frame->data);
    1270:	df 01       	movw	r26, r30
    1272:	11 96       	adiw	r26, 0x01	; 1
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
        SPDR = frame_length;
        while ((SPSR & (1 << SPIF)) == 0) {;}
            
        do {
            
            uint8_t const tempData = SPDR;
    1278:	8e b5       	in	r24, 0x2e	; 46
            SPDR = tempData; // Any data will do, and tempData is readily available. Saving cycles.
    127a:	8e bd       	out	0x2e, r24	; 46
            
            *rx_data++ = tempData;      
    127c:	8d 93       	st	X+, r24
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    127e:	28 27       	eor	r18, r24
    1280:	02 2e       	mov	r0, r18
    1282:	22 95       	swap	r18
    1284:	20 7f       	andi	r18, 0xF0	; 240
    1286:	20 25       	eor	r18, r0
    1288:	03 2e       	mov	r0, r19
    128a:	32 2f       	mov	r19, r18
    128c:	22 95       	swap	r18
    128e:	2f 70       	andi	r18, 0x0F	; 15
    1290:	02 26       	eor	r0, r18
    1292:	26 95       	lsr	r18
    1294:	32 27       	eor	r19, r18
    1296:	23 27       	eor	r18, r19
    1298:	22 0f       	add	r18, r18
    129a:	22 0f       	add	r18, r18
    129c:	22 0f       	add	r18, r18
    129e:	20 25       	eor	r18, r0
            
            crc = crc_ccitt_update( crc, tempData );
            
            while ((SPSR & (1 << SPIF)) == 0) {;}
    12a0:	0d b4       	in	r0, 0x2d	; 45
    12a2:	07 fe       	sbrs	r0, 7
    12a4:	fd cf       	rjmp	.-6      	; 0x12a0 <hal_frame_read+0x6a>
        } while (--frame_length > 0);
    12a6:	91 50       	subi	r25, 0x01	; 1
    12a8:	39 f7       	brne	.-50     	; 0x1278 <hal_frame_read+0x42>
        
        /*Read LQI value for this frame.*/
        rx_frame->lqi = SPDR;
    12aa:	8e b5       	in	r24, 0x2e	; 46
    12ac:	e0 58       	subi	r30, 0x80	; 128
    12ae:	ff 4f       	sbci	r31, 0xFF	; 255
    12b0:	81 93       	st	Z+, r24
        
        HAL_SS_HIGH( );
    12b2:	28 9a       	sbi	0x05, 0	; 5
        
        /*Check calculated crc, and set crc field in hal_rx_frame_t accordingly.*/
        if (crc == HAL_CALCULATED_CRC_OK) {
    12b4:	23 2b       	or	r18, r19
    12b6:	41 f4       	brne	.+16     	; 0x12c8 <hal_frame_read+0x92>
            rx_frame->crc = true; 
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	80 83       	st	Z, r24
    12bc:	06 c0       	rjmp	.+12     	; 0x12ca <hal_frame_read+0x94>
        } else { rx_frame->crc = false; }
    } else {
        
        HAL_SS_HIGH( );
    12be:	28 9a       	sbi	0x05, 0	; 5
        
        rx_frame->length = 0;
    12c0:	10 82       	st	Z, r1
        rx_frame->lqi    = 0;
    12c2:	e0 58       	subi	r30, 0x80	; 128
    12c4:	ff 4f       	sbci	r31, 0xFF	; 255
    12c6:	11 92       	st	Z+, r1
        rx_frame->crc    = false;    
    12c8:	10 82       	st	Z, r1
    }
    
    AVR_LEAVE_CRITICAL_REGION( );
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	8f bf       	out	0x3f, r24	; 63
}
    12ce:	0f 90       	pop	r0
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <hal_frame_write>:
 *  \param  write_buffer    Pointer to data that is to be written to frame buffer.
 *  \param  length          Length of data. The maximum length is 127 bytes.
 *
 *  \ingroup hal_avr_api
 */
__z void hal_frame_write( uint8_t *write_buffer, uint8_t length ){
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	0f 92       	push	r0
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	fc 01       	movw	r30, r24
    
    length &= HAL_TRX_CMD_RADDRM; //Truncate length to maximum frame length.
    12e2:	6f 77       	andi	r22, 0x7F	; 127
    
    AVR_ENTER_CRITICAL_REGION( );
    12e4:	8f b7       	in	r24, 0x3f	; 63
    12e6:	89 83       	std	Y+1, r24	; 0x01
    
    HAL_SS_LOW( ); //Initiate the SPI transaction.
    12e8:	28 98       	cbi	0x05, 0	; 5
    
    /*SEND FRAME WRITE COMMAND AND FRAME LENGTH.*/
    SPDR = HAL_TRX_CMD_FW;
    12ea:	80 e6       	ldi	r24, 0x60	; 96
    12ec:	8e bd       	out	0x2e, r24	; 46
    while ((SPSR & (1 << SPIF)) == 0) {;}
    12ee:	0d b4       	in	r0, 0x2d	; 45
    12f0:	07 fe       	sbrs	r0, 7
    12f2:	fd cf       	rjmp	.-6      	; 0x12ee <hal_frame_write+0x18>
    uint8_t dummy_read = SPDR;
    12f4:	8e b5       	in	r24, 0x2e	; 46
        
    SPDR = length;
    12f6:	6e bd       	out	0x2e, r22	; 46
    while ((SPSR & (1 << SPIF)) == 0) {;}
    12f8:	0d b4       	in	r0, 0x2d	; 45
    12fa:	07 fe       	sbrs	r0, 7
    12fc:	fd cf       	rjmp	.-6      	; 0x12f8 <hal_frame_write+0x22>
    dummy_read = SPDR;
    12fe:	8e b5       	in	r24, 0x2e	; 46
    
    //Download to the Frame Buffer.
    do {
        
        SPDR = *write_buffer++;
    1300:	81 91       	ld	r24, Z+
    1302:	8e bd       	out	0x2e, r24	; 46
        --length;
    1304:	61 50       	subi	r22, 0x01	; 1
        
        while ((SPSR & (1 << SPIF)) == 0) {;}
    1306:	0d b4       	in	r0, 0x2d	; 45
    1308:	07 fe       	sbrs	r0, 7
    130a:	fd cf       	rjmp	.-6      	; 0x1306 <hal_frame_write+0x30>
        
        dummy_read = SPDR;
    130c:	8e b5       	in	r24, 0x2e	; 46
    } while (length > 0);
    130e:	66 23       	and	r22, r22
    1310:	b9 f7       	brne	.-18     	; 0x1300 <hal_frame_write+0x2a>
    
    HAL_SS_HIGH( ); //Terminate SPI transaction.
    1312:	28 9a       	sbi	0x05, 0	; 5
    
    AVR_LEAVE_CRITICAL_REGION( );
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	8f bf       	out	0x3f, r24	; 63
}
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <hal_sram_read>:
 * \param length Length of the read burst
 * \param data Pointer to buffer where data is stored.
 *
 * \ingroup hal_avr_api
 */
__z void hal_sram_read( uint8_t address, uint8_t length, uint8_t *data ){
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	0f 92       	push	r0
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	98 2f       	mov	r25, r24
    132c:	fa 01       	movw	r30, r20
    
    AVR_ENTER_CRITICAL_REGION( );
    132e:	8f b7       	in	r24, 0x3f	; 63
    1330:	89 83       	std	Y+1, r24	; 0x01
    
    HAL_SS_LOW( ); //Initiate the SPI transaction.
    1332:	28 98       	cbi	0x05, 0	; 5
    
    /*Send SRAM read command.*/
    SPDR = HAL_TRX_CMD_SR;
    1334:	1e bc       	out	0x2e, r1	; 46
    while ((SPSR & (1 << SPIF)) == 0) {;}
    1336:	0d b4       	in	r0, 0x2d	; 45
    1338:	07 fe       	sbrs	r0, 7
    133a:	fd cf       	rjmp	.-6      	; 0x1336 <hal_sram_read+0x16>
    uint8_t dummy_read = SPDR;
    133c:	8e b5       	in	r24, 0x2e	; 46
    
    /*Send address where to start reading.*/    
    SPDR = address;
    133e:	9e bd       	out	0x2e, r25	; 46
    while ((SPSR & (1 << SPIF)) == 0) {;}
    1340:	0d b4       	in	r0, 0x2d	; 45
    1342:	07 fe       	sbrs	r0, 7
    1344:	fd cf       	rjmp	.-6      	; 0x1340 <hal_sram_read+0x20>
    dummy_read = SPDR;
    1346:	8e b5       	in	r24, 0x2e	; 46
    
    /*Upload the chosen memory area.*/
    do {
        
        SPDR = HAL_DUMMY_READ;
    1348:	1e bc       	out	0x2e, r1	; 46
        while ((SPSR & (1 << SPIF)) == 0) {;}
    134a:	0d b4       	in	r0, 0x2d	; 45
    134c:	07 fe       	sbrs	r0, 7
    134e:	fd cf       	rjmp	.-6      	; 0x134a <hal_sram_read+0x2a>
        *data++ = SPDR;
    1350:	8e b5       	in	r24, 0x2e	; 46
    1352:	80 83       	st	Z, r24
    } while (--length > 0);
    1354:	61 50       	subi	r22, 0x01	; 1
    1356:	11 f0       	breq	.+4      	; 0x135c <hal_sram_read+0x3c>
    /*Upload the chosen memory area.*/
    do {
        
        SPDR = HAL_DUMMY_READ;
        while ((SPSR & (1 << SPIF)) == 0) {;}
        *data++ = SPDR;
    1358:	31 96       	adiw	r30, 0x01	; 1
    135a:	f6 cf       	rjmp	.-20     	; 0x1348 <hal_sram_read+0x28>
    } while (--length > 0);

    HAL_SS_HIGH( );
    135c:	28 9a       	sbi	0x05, 0	; 5
    
    AVR_LEAVE_CRITICAL_REGION( );
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	8f bf       	out	0x3f, r24	; 63
}
    1362:	0f 90       	pop	r0
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	08 95       	ret

0000136a <hal_sram_write>:
 * \param length  Length of the write burst
 * \param data    Pointer to an array of bytes that should be written
 *
 * \ingroup hal_avr_api
 */
__z void hal_sram_write( uint8_t address, uint8_t length, uint8_t *data ){
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	0f 92       	push	r0
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	98 2f       	mov	r25, r24
    1376:	fa 01       	movw	r30, r20
    
    AVR_ENTER_CRITICAL_REGION( );
    1378:	8f b7       	in	r24, 0x3f	; 63
    137a:	89 83       	std	Y+1, r24	; 0x01
        
    HAL_SS_LOW( );
    137c:	28 98       	cbi	0x05, 0	; 5
    
    /*Send SRAM write command.*/
    SPDR = HAL_TRX_CMD_SW;
    137e:	80 e4       	ldi	r24, 0x40	; 64
    1380:	8e bd       	out	0x2e, r24	; 46
    while ((SPSR & (1 << SPIF)) == 0) {;}
    1382:	0d b4       	in	r0, 0x2d	; 45
    1384:	07 fe       	sbrs	r0, 7
    1386:	fd cf       	rjmp	.-6      	; 0x1382 <hal_sram_write+0x18>
    uint8_t dummy_read = SPDR;
    1388:	8e b5       	in	r24, 0x2e	; 46
    
    /*Send address where to start writing to.*/
    SPDR = address;
    138a:	9e bd       	out	0x2e, r25	; 46
    while ((SPSR & (1 << SPIF)) == 0) {;}
    138c:	0d b4       	in	r0, 0x2d	; 45
    138e:	07 fe       	sbrs	r0, 7
    1390:	fd cf       	rjmp	.-6      	; 0x138c <hal_sram_write+0x22>
    dummy_read = SPDR;
    1392:	8e b5       	in	r24, 0x2e	; 46
    
    /*Upload the chosen memory area.*/
    do {
        
        SPDR = *data++;
    1394:	81 91       	ld	r24, Z+
    1396:	8e bd       	out	0x2e, r24	; 46
        while ((SPSR & (1 << SPIF)) == 0) {;}
    1398:	0d b4       	in	r0, 0x2d	; 45
    139a:	07 fe       	sbrs	r0, 7
    139c:	fd cf       	rjmp	.-6      	; 0x1398 <hal_sram_write+0x2e>
        dummy_read = SPDR;
    139e:	8e b5       	in	r24, 0x2e	; 46
    } while (--length > 0);
    13a0:	61 50       	subi	r22, 0x01	; 1
    13a2:	c1 f7       	brne	.-16     	; 0x1394 <hal_sram_write+0x2a>
    
    HAL_SS_HIGH( );
    13a4:	28 9a       	sbi	0x05, 0	; 5
    
    AVR_LEAVE_CRITICAL_REGION( );
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	8f bf       	out	0x3f, r24	; 63
}
    13aa:	0f 90       	pop	r0
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <hal_trx_aes_wrrd>:

__z void hal_trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	0f 92       	push	r0
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	98 2f       	mov	r25, r24
    13be:	db 01       	movw	r26, r22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13c0:	82 e0       	ldi	r24, 0x02	; 2
    13c2:	8a 95       	dec	r24
    13c4:	f1 f7       	brne	.-4      	; 0x13c2 <hal_trx_aes_wrrd+0x10>
    uint8_t *odata;

    delay_us(1);

    AVR_ENTER_CRITICAL_REGION();
    13c6:	8f b7       	in	r24, 0x3f	; 63
    13c8:	89 83       	std	Y+1, r24	; 0x01
    /* Start SPI transaction by pulling SEL low */
    HAL_SS_LOW();
    13ca:	28 98       	cbi	0x05, 0	; 5

    /* Send the command byte */
    SPDR = HAL_TRX_CMD_SW;
    13cc:	80 e4       	ldi	r24, 0x40	; 64
    13ce:	8e bd       	out	0x2e, r24	; 46
    while ((SPSR & (1 << SPIF)) == 0) {;}
    13d0:	0d b4       	in	r0, 0x2d	; 45
    13d2:	07 fe       	sbrs	r0, 7
    13d4:	fd cf       	rjmp	.-6      	; 0x13d0 <hal_trx_aes_wrrd+0x1e>

    /* write SRAM start address */
    SPDR = addr;
    13d6:	9e bd       	out	0x2e, r25	; 46
    while ((SPSR & (1 << SPIF)) == 0) {;}
    13d8:	0d b4       	in	r0, 0x2d	; 45
    13da:	07 fe       	sbrs	r0, 7
    13dc:	fd cf       	rjmp	.-6      	; 0x13d8 <hal_trx_aes_wrrd+0x26>

    /* now transfer data */
    odata = idata;

    /* write data byte 0 - the obtained value in SPDR is meaningless */
    SPDR = *idata++;
    13de:	8c 91       	ld	r24, X
    13e0:	8e bd       	out	0x2e, r24	; 46
    while ((SPSR & (1 << SPIF)) == 0) {;}
    13e2:	0d b4       	in	r0, 0x2d	; 45
    13e4:	07 fe       	sbrs	r0, 7
    13e6:	fd cf       	rjmp	.-6      	; 0x13e2 <hal_trx_aes_wrrd+0x30>
    13e8:	94 2f       	mov	r25, r20
    13ea:	fd 01       	movw	r30, r26
    13ec:	07 c0       	rjmp	.+14     	; 0x13fc <hal_trx_aes_wrrd+0x4a>

    /* process data bytes 1...length-1: write and read */
    while (--length)
    {
        SPDR = *idata++;
    13ee:	81 81       	ldd	r24, Z+1	; 0x01
    13f0:	8e bd       	out	0x2e, r24	; 46
        while ((SPSR & (1 << SPIF)) == 0) {;}
    13f2:	0d b4       	in	r0, 0x2d	; 45
    13f4:	07 fe       	sbrs	r0, 7
    13f6:	fd cf       	rjmp	.-6      	; 0x13f2 <hal_trx_aes_wrrd+0x40>
        *odata++ = SPDR;
    13f8:	8e b5       	in	r24, 0x2e	; 46
    13fa:	81 93       	st	Z+, r24
    /* write data byte 0 - the obtained value in SPDR is meaningless */
    SPDR = *idata++;
    while ((SPSR & (1 << SPIF)) == 0) {;}

    /* process data bytes 1...length-1: write and read */
    while (--length)
    13fc:	91 50       	subi	r25, 0x01	; 1
    13fe:	b9 f7       	brne	.-18     	; 0x13ee <hal_trx_aes_wrrd+0x3c>
    1400:	41 50       	subi	r20, 0x01	; 1
    1402:	fd 01       	movw	r30, r26
    1404:	e4 0f       	add	r30, r20
    1406:	f1 1d       	adc	r31, r1
        while ((SPSR & (1 << SPIF)) == 0) {;}
        *odata++ = SPDR;
    }

    /* to get the last data byte, write some dummy byte */
    SPDR = SPI_DUMMY_VALUE;
    1408:	1e bc       	out	0x2e, r1	; 46
    while ((SPSR & (1 << SPIF)) == 0) {;}
    140a:	0d b4       	in	r0, 0x2d	; 45
    140c:	07 fe       	sbrs	r0, 7
    140e:	fd cf       	rjmp	.-6      	; 0x140a <hal_trx_aes_wrrd+0x58>
    *odata++ = SPDR;
    1410:	8e b5       	in	r24, 0x2e	; 46
    1412:	80 83       	st	Z, r24

    /* Stop the SPI transaction by setting SEL high */
    HAL_SS_HIGH();
    1414:	28 9a       	sbi	0x05, 0	; 5
    AVR_LEAVE_CRITICAL_REGION();
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	8f bf       	out	0x3f, r24	; 63
}
    141a:	0f 90       	pop	r0
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <hal_get_system_time>:
 *
 * \returns The system time with symbol resolution.
 *
 * \ingroup hal_avr_api
 */
uint32_t hal_get_system_time( void ){
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	0f 92       	push	r0
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    
    uint32_t system_time = hal_system_time; //Read current system time (MSB).
    142c:	20 91 f7 05 	lds	r18, 0x05F7
    1430:	30 91 f8 05 	lds	r19, 0x05F8
    1434:	40 e0       	ldi	r20, 0x00	; 0
    1436:	50 e0       	ldi	r21, 0x00	; 0
    system_time <<= 16;
    1438:	a9 01       	movw	r20, r18
    143a:	33 27       	eor	r19, r19
    143c:	22 27       	eor	r18, r18
    
    /*Disable interrupts. This is done since the TCNT1 value should not 
      be read when the timer is running.*/
    AVR_ENTER_CRITICAL_REGION( );
    143e:	8f b7       	in	r24, 0x3f	; 63
    1440:	89 83       	std	Y+1, r24	; 0x01
    
    system_time |= TCNT1; //Add 16 LSB. 
    1442:	80 91 84 00 	lds	r24, 0x0084
    1446:	90 91 85 00 	lds	r25, 0x0085
    
    AVR_LEAVE_CRITICAL_REGION( );
    144a:	69 81       	ldd	r22, Y+1	; 0x01
    144c:	6f bf       	out	0x3f, r22	; 63
    144e:	a0 e0       	ldi	r26, 0x00	; 0
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	28 2b       	or	r18, r24
    1454:	39 2b       	or	r19, r25
    1456:	4a 2b       	or	r20, r26
    1458:	5b 2b       	or	r21, r27
    145a:	56 95       	lsr	r21
    145c:	47 95       	ror	r20
    145e:	37 95       	ror	r19
    1460:	27 95       	ror	r18
    
    //Return the system time in symbols.
    return ((system_time / HAL_US_PER_SYMBOL) & HAL_SYMBOL_MASK);
}
    1462:	b9 01       	movw	r22, r18
    1464:	ca 01       	movw	r24, r20
    1466:	0f 90       	pop	r0
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <__vector_16>:
 *  This is the interrupt service routine for timer1.ICIE1 input capture.
 *  It is triggered of a rising edge on the radio transceivers IRQ line.
 */
void TIMER1_CAPT_vect( void );
#else  /* !DOXYGEN */
ISR( TIMER1_CAPT_vect ){
    146e:	1f 92       	push	r1
    1470:	0f 92       	push	r0
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	0f 92       	push	r0
    1476:	0b b6       	in	r0, 0x3b	; 59
    1478:	0f 92       	push	r0
    147a:	11 24       	eor	r1, r1
    147c:	0f 93       	push	r16
    147e:	1f 93       	push	r17
    1480:	2f 93       	push	r18
    1482:	3f 93       	push	r19
    1484:	4f 93       	push	r20
    1486:	5f 93       	push	r21
    1488:	6f 93       	push	r22
    148a:	7f 93       	push	r23
    148c:	8f 93       	push	r24
    148e:	9f 93       	push	r25
    1490:	af 93       	push	r26
    1492:	bf 93       	push	r27
    1494:	ef 93       	push	r30
    1496:	ff 93       	push	r31
    
    /*The following code reads the current system time. This is done by first 
      reading the hal_system_time and then adding the 16 LSB directly from the
      TCNT1 register.
     */
    uint32_t isr_timestamp = hal_system_time;
    1498:	80 91 f7 05 	lds	r24, 0x05F7
    149c:	90 91 f8 05 	lds	r25, 0x05F8
    14a0:	a0 e0       	ldi	r26, 0x00	; 0
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    isr_timestamp <<= 16;
    14a4:	9c 01       	movw	r18, r24
    14a6:	11 27       	eor	r17, r17
    14a8:	00 27       	eor	r16, r16
    isr_timestamp |= TCNT1; 
    14aa:	80 91 84 00 	lds	r24, 0x0084
    14ae:	90 91 85 00 	lds	r25, 0x0085
    14b2:	a0 e0       	ldi	r26, 0x00	; 0
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	08 2b       	or	r16, r24
    14b8:	19 2b       	or	r17, r25
    14ba:	2a 2b       	or	r18, r26
    14bc:	3b 2b       	or	r19, r27
    
    /*Read Interrupt source.*/
    HAL_SS_LOW( );
    14be:	28 98       	cbi	0x05, 0	; 5
    
    /*Send Register address and read register content.*/
    SPDR = RG_IRQ_STATUS | HAL_TRX_CMD_RR;
    14c0:	8f e8       	ldi	r24, 0x8F	; 143
    14c2:	8e bd       	out	0x2e, r24	; 46
    /* This is the second part of the convertion of system time to a 16 us time 
       base. The division is moved here so we can spend less time waiting for SPI
       data.    
     */
    isr_timestamp /= HAL_US_PER_SYMBOL; //Divide so that we get time in 16us resolution.
    isr_timestamp &= HAL_SYMBOL_MASK;  
    14c4:	36 95       	lsr	r19
    14c6:	27 95       	ror	r18
    14c8:	17 95       	ror	r17
    14ca:	07 95       	ror	r16
    
    while ((SPSR & (1 << SPIF)) == 0) {;}
    14cc:	0d b4       	in	r0, 0x2d	; 45
    14ce:	07 fe       	sbrs	r0, 7
    14d0:	fd cf       	rjmp	.-6      	; 0x14cc <__vector_16+0x5e>
    uint8_t interrupt_source = SPDR; //The interrupt variable is used as a dummy read.
    14d2:	8e b5       	in	r24, 0x2e	; 46
    
    SPDR = interrupt_source;
    14d4:	8e bd       	out	0x2e, r24	; 46
    while ((SPSR & (1 << SPIF)) == 0) {;}	
    14d6:	0d b4       	in	r0, 0x2d	; 45
    14d8:	07 fe       	sbrs	r0, 7
    14da:	fd cf       	rjmp	.-6      	; 0x14d6 <__vector_16+0x68>
    interrupt_source = SPDR; //The interrupt source is read.
    14dc:	9e b5       	in	r25, 0x2e	; 46

    HAL_SS_HIGH( );
    14de:	28 9a       	sbi	0x05, 0	; 5

    /*Handle the incomming interrupt. Prioritized.*/
    if ((interrupt_source & HAL_RX_START_MASK)) {
    14e0:	92 ff       	sbrs	r25, 2
    14e2:	1d c0       	rjmp	.+58     	; 0x151e <__vector_16+0xb0>
        
        hal_rx_start_flag++; //Increment RX_START flag.
    14e4:	80 91 fc 05 	lds	r24, 0x05FC
    14e8:	8f 5f       	subi	r24, 0xFF	; 255
    14ea:	80 93 fc 05 	sts	0x05FC, r24
        
        if( rx_start_callback != NULL ){
    14ee:	e0 91 00 06 	lds	r30, 0x0600
    14f2:	f0 91 01 06 	lds	r31, 0x0601
    14f6:	30 97       	sbiw	r30, 0x00	; 0
    14f8:	09 f4       	brne	.+2      	; 0x14fc <__vector_16+0x8e>
    14fa:	4f c0       	rjmp	.+158    	; 0x159a <__vector_16+0x12c>
            
            /*Read Frame length and call rx_start callback.*/
            HAL_SS_LOW( );
    14fc:	28 98       	cbi	0x05, 0	; 5
    
            SPDR = HAL_TRX_CMD_FR;
    14fe:	80 e2       	ldi	r24, 0x20	; 32
    1500:	8e bd       	out	0x2e, r24	; 46
            while ((SPSR & (1 << SPIF)) == 0) {;}
    1502:	0d b4       	in	r0, 0x2d	; 45
    1504:	07 fe       	sbrs	r0, 7
    1506:	fd cf       	rjmp	.-6      	; 0x1502 <__vector_16+0x94>
            uint8_t frame_length = SPDR;
    1508:	8e b5       	in	r24, 0x2e	; 46
        
            SPDR = frame_length; //Any data will do, so frame_length is used.
    150a:	8e bd       	out	0x2e, r24	; 46
            while ((SPSR & (1 << SPIF)) == 0) {;}
    150c:	0d b4       	in	r0, 0x2d	; 45
    150e:	07 fe       	sbrs	r0, 7
    1510:	fd cf       	rjmp	.-6      	; 0x150c <__vector_16+0x9e>
            frame_length = SPDR;
    1512:	4e b5       	in	r20, 0x2e	; 46
            
            HAL_SS_HIGH( );
    1514:	28 9a       	sbi	0x05, 0	; 5
            
            rx_start_callback( isr_timestamp, frame_length );
    1516:	c9 01       	movw	r24, r18
    1518:	b8 01       	movw	r22, r16
    151a:	09 95       	icall
    151c:	3e c0       	rjmp	.+124    	; 0x159a <__vector_16+0x12c>
        }
    } else if (interrupt_source & HAL_TRX_END_MASK) {
    151e:	93 ff       	sbrs	r25, 3
    1520:	0f c0       	rjmp	.+30     	; 0x1540 <__vector_16+0xd2>
        
        hal_trx_end_flag++; //Increment TRX_END flag.
    1522:	80 91 fb 05 	lds	r24, 0x05FB
    1526:	8f 5f       	subi	r24, 0xFF	; 255
    1528:	80 93 fb 05 	sts	0x05FB, r24
        
        if( trx_end_callback != NULL ){
    152c:	e0 91 02 06 	lds	r30, 0x0602
    1530:	f0 91 03 06 	lds	r31, 0x0603
    1534:	30 97       	sbiw	r30, 0x00	; 0
    1536:	89 f1       	breq	.+98     	; 0x159a <__vector_16+0x12c>
            trx_end_callback( isr_timestamp );
    1538:	c9 01       	movw	r24, r18
    153a:	b8 01       	movw	r22, r16
    153c:	09 95       	icall
    153e:	2d c0       	rjmp	.+90     	; 0x159a <__vector_16+0x12c>
        }
    } else if (interrupt_source & HAL_TRX_UR_MASK) {
    1540:	96 ff       	sbrs	r25, 6
    1542:	06 c0       	rjmp	.+12     	; 0x1550 <__vector_16+0xe2>
        hal_trx_ur_flag++; //Increment TRX_UR flag.    
    1544:	80 91 fa 05 	lds	r24, 0x05FA
    1548:	8f 5f       	subi	r24, 0xFF	; 255
    154a:	80 93 fa 05 	sts	0x05FA, r24
    154e:	25 c0       	rjmp	.+74     	; 0x159a <__vector_16+0x12c>
    } else if (interrupt_source & HAL_PLL_UNLOCK_MASK) {
    1550:	91 ff       	sbrs	r25, 1
    1552:	06 c0       	rjmp	.+12     	; 0x1560 <__vector_16+0xf2>
        hal_pll_unlock_flag++; //Increment PLL_UNLOCK flag.   
    1554:	80 91 fe 05 	lds	r24, 0x05FE
    1558:	8f 5f       	subi	r24, 0xFF	; 255
    155a:	80 93 fe 05 	sts	0x05FE, r24
    155e:	1d c0       	rjmp	.+58     	; 0x159a <__vector_16+0x12c>
    } else if (interrupt_source & HAL_PLL_LOCK_MASK) {
    1560:	90 ff       	sbrs	r25, 0
    1562:	06 c0       	rjmp	.+12     	; 0x1570 <__vector_16+0x102>
        hal_pll_lock_flag++; //Increment PLL_LOCK flag.
    1564:	80 91 ff 05 	lds	r24, 0x05FF
    1568:	8f 5f       	subi	r24, 0xFF	; 255
    156a:	80 93 ff 05 	sts	0x05FF, r24
    156e:	15 c0       	rjmp	.+42     	; 0x159a <__vector_16+0x12c>
    } else if (interrupt_source & HAL_BAT_LOW_MASK) {
    1570:	97 ff       	sbrs	r25, 7
    1572:	0e c0       	rjmp	.+28     	; 0x1590 <__vector_16+0x122>

        //Disable BAT_LOW interrupt to prevent interrupt storm. The interrupt 
        //will continously be signaled when the supply voltage is less than the 
        //user defined voltage threshold.
        uint8_t trx_isr_mask = hal_register_read( RG_IRQ_MASK );
    1574:	8e e0       	ldi	r24, 0x0E	; 14
    1576:	0e 94 b5 08 	call	0x116a	; 0x116a <hal_register_read>
        trx_isr_mask &= ~HAL_BAT_LOW_MASK;
        hal_register_write( RG_IRQ_MASK, trx_isr_mask );
    157a:	68 2f       	mov	r22, r24
    157c:	6f 77       	andi	r22, 0x7F	; 127
    157e:	8e e0       	ldi	r24, 0x0E	; 14
    1580:	0e 94 cf 08 	call	0x119e	; 0x119e <hal_register_write>
        hal_bat_low_flag++; //Increment BAT_LOW flag.
    1584:	80 91 f9 05 	lds	r24, 0x05F9
    1588:	8f 5f       	subi	r24, 0xFF	; 255
    158a:	80 93 f9 05 	sts	0x05F9, r24
    158e:	05 c0       	rjmp	.+10     	; 0x159a <__vector_16+0x12c>
    } else {
        hal_unknown_isr_flag++;  //Increment UNKNOWN_ISR flag.
    1590:	80 91 fd 05 	lds	r24, 0x05FD
    1594:	8f 5f       	subi	r24, 0xFF	; 255
    1596:	80 93 fd 05 	sts	0x05FD, r24
    } 
}
    159a:	ff 91       	pop	r31
    159c:	ef 91       	pop	r30
    159e:	bf 91       	pop	r27
    15a0:	af 91       	pop	r26
    15a2:	9f 91       	pop	r25
    15a4:	8f 91       	pop	r24
    15a6:	7f 91       	pop	r23
    15a8:	6f 91       	pop	r22
    15aa:	5f 91       	pop	r21
    15ac:	4f 91       	pop	r20
    15ae:	3f 91       	pop	r19
    15b0:	2f 91       	pop	r18
    15b2:	1f 91       	pop	r17
    15b4:	0f 91       	pop	r16
    15b6:	0f 90       	pop	r0
    15b8:	0b be       	out	0x3b, r0	; 59
    15ba:	0f 90       	pop	r0
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	0f 90       	pop	r0
    15c0:	1f 90       	pop	r1
    15c2:	18 95       	reti

000015c4 <__vector_20>:
/*! \brief Timer Overflow ISR
 * This is the interrupt service routine for timer1 overflow.
 */
void TIMER1_OVF_vect( void );
#else  /* !DOXYGEN */
ISR( TIMER1_OVF_vect ){
    15c4:	1f 92       	push	r1
    15c6:	0f 92       	push	r0
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	0f 92       	push	r0
    15cc:	11 24       	eor	r1, r1
    15ce:	8f 93       	push	r24
    15d0:	9f 93       	push	r25
    hal_system_time++;
    15d2:	80 91 f7 05 	lds	r24, 0x05F7
    15d6:	90 91 f8 05 	lds	r25, 0x05F8
    15da:	01 96       	adiw	r24, 0x01	; 1
    15dc:	90 93 f8 05 	sts	0x05F8, r25
    15e0:	80 93 f7 05 	sts	0x05F7, r24
}
    15e4:	9f 91       	pop	r25
    15e6:	8f 91       	pop	r24
    15e8:	0f 90       	pop	r0
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	0f 90       	pop	r0
    15ee:	1f 90       	pop	r1
    15f0:	18 95       	reti

000015f2 <__udivmodqi4>:
    15f2:	99 1b       	sub	r25, r25
    15f4:	79 e0       	ldi	r23, 0x09	; 9
    15f6:	04 c0       	rjmp	.+8      	; 0x1600 <__udivmodqi4_ep>

000015f8 <__udivmodqi4_loop>:
    15f8:	99 1f       	adc	r25, r25
    15fa:	96 17       	cp	r25, r22
    15fc:	08 f0       	brcs	.+2      	; 0x1600 <__udivmodqi4_ep>
    15fe:	96 1b       	sub	r25, r22

00001600 <__udivmodqi4_ep>:
    1600:	88 1f       	adc	r24, r24
    1602:	7a 95       	dec	r23
    1604:	c9 f7       	brne	.-14     	; 0x15f8 <__udivmodqi4_loop>
    1606:	80 95       	com	r24
    1608:	08 95       	ret

0000160a <__divmodhi4>:
    160a:	97 fb       	bst	r25, 7
    160c:	09 2e       	mov	r0, r25
    160e:	07 26       	eor	r0, r23
    1610:	0a d0       	rcall	.+20     	; 0x1626 <__divmodhi4_neg1>
    1612:	77 fd       	sbrc	r23, 7
    1614:	04 d0       	rcall	.+8      	; 0x161e <__divmodhi4_neg2>
    1616:	0c d0       	rcall	.+24     	; 0x1630 <__udivmodhi4>
    1618:	06 d0       	rcall	.+12     	; 0x1626 <__divmodhi4_neg1>
    161a:	00 20       	and	r0, r0
    161c:	1a f4       	brpl	.+6      	; 0x1624 <__divmodhi4_exit>

0000161e <__divmodhi4_neg2>:
    161e:	70 95       	com	r23
    1620:	61 95       	neg	r22
    1622:	7f 4f       	sbci	r23, 0xFF	; 255

00001624 <__divmodhi4_exit>:
    1624:	08 95       	ret

00001626 <__divmodhi4_neg1>:
    1626:	f6 f7       	brtc	.-4      	; 0x1624 <__divmodhi4_exit>
    1628:	90 95       	com	r25
    162a:	81 95       	neg	r24
    162c:	9f 4f       	sbci	r25, 0xFF	; 255
    162e:	08 95       	ret

00001630 <__udivmodhi4>:
    1630:	aa 1b       	sub	r26, r26
    1632:	bb 1b       	sub	r27, r27
    1634:	51 e1       	ldi	r21, 0x11	; 17
    1636:	07 c0       	rjmp	.+14     	; 0x1646 <__udivmodhi4_ep>

00001638 <__udivmodhi4_loop>:
    1638:	aa 1f       	adc	r26, r26
    163a:	bb 1f       	adc	r27, r27
    163c:	a6 17       	cp	r26, r22
    163e:	b7 07       	cpc	r27, r23
    1640:	10 f0       	brcs	.+4      	; 0x1646 <__udivmodhi4_ep>
    1642:	a6 1b       	sub	r26, r22
    1644:	b7 0b       	sbc	r27, r23

00001646 <__udivmodhi4_ep>:
    1646:	88 1f       	adc	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	5a 95       	dec	r21
    164c:	a9 f7       	brne	.-22     	; 0x1638 <__udivmodhi4_loop>
    164e:	80 95       	com	r24
    1650:	90 95       	com	r25
    1652:	bc 01       	movw	r22, r24
    1654:	cd 01       	movw	r24, r26
    1656:	08 95       	ret

00001658 <_exit>:
    1658:	f8 94       	cli

0000165a <__stop_program>:
    165a:	ff cf       	rjmp	.-2      	; 0x165a <__stop_program>
